package multiLevelGroups;

import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.Parameters;

public class Params {

	/********************************
	 * 								*
	 * Model parameters				*
	 * 								*
	 * ******************************/
	
	final static Parameters p = RunEnvironment.getInstance().getParameters();
	
	//Simulation
	public final static int numberOfThreads = 1;
	
	//landscape
	public final static String geog = "geog";
	public static int landscapeWidth = 50;
	public static double envHomogen = 0.5;
	
	//resource cells
	public final static int cellSize = 30;
	public static double regrowthRate = 0.001;
	public static double depletionRate = 0.1;
	
	//OMU population
	public static int numbOMU = 10;
	public static int IBI = 10000;  //inter-birth interval
	public static int maxAge = 10000*10; 
	public static int juveStage = 10000; //amount of time with mother
		
	//OMU foraging behaviour
	public static int foodSearchRange = 100;
	public static int visualSearchRange = 100;
	
	//OMU momvement behaviour
	public static double bearingWeight = 0.20;
	public static double foodWeight = 1.0;
	public static double socialWeight = 1.0;
	public static double homeWeight = 0.010;
	public final static int maxDistPerStep = 5;
	
	//Familiarity
	public static double lDecay = 0.0001;
	public static double iGrow = 0.1;
	public static double iDecay = 0.009;
	public static double famMinInd = -0.999; //0.001
	public static double famMinCell = 0.001;
	public static double famMaxCell = 0.999;
	public static double famMaxInd = 0.999;
	public static  double errorInd = 0.001;
	
	//Constructor: used to set values from batch runs or the GUI
		public Params(){
			
			envHomogen = (Double)p.getValue("envHomogen");
			regrowthRate = (Double)p.getValue("regrow");
			depletionRate = (Double)p.getValue("depletionRate");
			numbOMU = (Integer)p.getValue("NumbOMU");
			foodSearchRange = (Integer)p.getValue("foodSearchRange");
			visualSearchRange = (Integer)p.getValue("visualSearchRange");
			bearingWeight = (Double)p.getValue("bearingWeight");
			foodWeight = (Double)p.getValue("foodWeight");
			socialWeight = (Double)p.getValue("socialWeight");
			homeWeight = (Double)p.getValue("homeWeight");
			
			lDecay= (Double)p.getValue("lDecay");
			iGrow= (Double)p.getValue("iGrow");
			iDecay= (Double)p.getValue("iDecay");
			famMinInd= (Double)p.getValue("famMinInd");
			famMinCell= (Double)p.getValue("famMinCell");
			famMaxCell= (Double)p.getValue("famMaxCell");
			famMaxInd= (Double)p.getValue("famMaxInd");
			errorInd= (Double)p.getValue("errorInd");
			
			landscapeWidth = (Integer)p.getValue("landWidth");
			
			
		}
	
}
