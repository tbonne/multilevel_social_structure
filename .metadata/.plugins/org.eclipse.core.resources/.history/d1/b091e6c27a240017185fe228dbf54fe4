package multiLevelGroups;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

import jsc.distributions.Beta;
import jsc.distributions.Lognormal;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Point;

import repast.simphony.context.Context;
import repast.simphony.context.space.gis.GeographyFactory;
import repast.simphony.context.space.gis.GeographyFactoryFinder;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.engine.schedule.ISchedule;
import repast.simphony.engine.schedule.ScheduleParameters;
import repast.simphony.random.RandomHelper;
import repast.simphony.space.gis.Geography;
import repast.simphony.space.gis.GeographyParameters;

public class ModelSetup implements ContextBuilder<Object> 	{

	private static Context mainContext;
	private static Geography geog;

	private static double resAdded;
	public static ArrayList<Cell> allCells;
	public static ArrayList<Cell> cellsToProcess;
	public static ArrayList<Cell> removeCellsToProcess;
	public static ArrayList<Individual> allOMUs;


	public Context<Object> build(Context<Object> context){

		System.out.println("Running multi-level group formation model");
		Params p = new Params(); 

		/********************************
		 * 								*
		 * initialize model parameters	*
		 * 								*
		 * ******************************/

		geog=null;
		mainContext = context; //static link to context

		resAdded=0;
		allCells = new ArrayList<Cell>();
		cellsToProcess = new ArrayList<Cell>();
		removeCellsToProcess = new ArrayList<Cell>();
		allOMUs = new ArrayList<Individual>();



		/****************************
		 * 							*
		 * Building the landscape	*
		 * 							*
		 * *************************/

		//Create Geometry factory; used to create GIS shapes (points=OMU; polygons=resources)
		GeometryFactory fac = new GeometryFactory();

		//Create Geography/GIS 
		GeographyParameters<Object> params= new GeographyParameters<Object>();
		GeographyFactory factory = GeographyFactoryFinder.createGeographyFactory(null);
		geog = factory.createGeography("geog", context, params);
		geog.setCRS("EPSG:32636"); //WGS 84 / UTM zone 36N EPSG:32636


		//x and y dims of the map file
		int xdim = Params.landscapeWidth;
		int ydim = Params.landscapeWidth;


		//adding hexagon grid cells
		Beta beta = new Beta(Params.envHomogen,Params.envHomogen);
		double xcoord=0,ycoord=0;
		int offset=0,count=0;

		for (int i = 0; i < ydim; ++i) {
			for (int j = 0; j < xdim; ++j) {

				//double food = 0;
				double food = beta.random();
				Cell cell=null;

				if(offset==0){
					xcoord=xcoord+(Params.cellSize/2.0)*Math.cos(2*Math.PI/3.0);
					offset=1;
					cell = new Cell(context,xcoord,ycoord,food,count++,geog);
					xcoord=xcoord-(Params.cellSize/2.0);
				}else if (offset==1){
					xcoord=xcoord-(Params.cellSize/2.0)*Math.cos(2*Math.PI/3.0);
					ycoord=ycoord+(Params.cellSize/2.0)*Math.sin(2*Math.PI/3.0);
					offset=0;
					cell = new Cell(context,xcoord,ycoord,food,count++,geog);
					ycoord=ycoord-(Params.cellSize/2.0)*Math.sin(2*Math.PI/3.0);
				}

				resAdded=resAdded+food;
				allCells.add(cell);

				//shift ycoord by cell size value
				xcoord=xcoord+Params.cellSize;
			}

			//Set ycoord back to the start and shift xcoord up by cell size value
			xcoord=0;
			ycoord = ycoord-(Params.cellSize)*Math.sin(2*Math.PI/3.0);
		}

		//to simplify the model all cells record the visible neighbours (within visible range for a primate)
		for (Cell c: allCells){
			c.setVisibleNeigh();
		}


		/************************************
		 * 							        *
		 * Adding OMUs to the landscape		*
		 * 							        *
		 * *********************************/

		//add individuals
		Collections.shuffle(allCells);
		for (int j = 0; j < Params.numbOMU; j++){

			//Coordinate coord = new Coordinate(RandomHelper.nextDoubleFromTo(0,Params.landscapeWidth*(Params.cellSize)*Math.sin(2*Math.PI/3.0)), RandomHelper.nextDoubleFromTo(0,-Params.landscapeWidth*(Params.cellSize)*Math.sin(2*Math.PI/3.0)));
			Coordinate coord = new Coordinate(allCells.get(j).getCoord().x+RandomHelper.nextDouble()-0.5*Params.cellSize,allCells.get(j).getCoord().y+RandomHelper.nextDouble()-0.5*Params.cellSize);
			Individual group = new Individual(coord,j);
			allOMUs.add(group);
			context.add(group);
			Point geom = fac.createPoint(coord);
			geog.move(group, geom);

		}

		/************************************
		 * 							        *
		 * create the scheduling			*
		 * 							        *
		 * *********************************/

		//executor takes care of the processing of the schedule
		Executor executor = new Executor();
		createSchedule(executor);


		/************************************
		 * 							        *
		 * Adding observer 					*
		 * 							        *
		 * *********************************/

		//watcher agent records all output
		//Observer w = new Observer(executor);
		//context.add(w);

		return context;

	}


	/************************************** Model Setup Scehduling ******************************************/

	private void createSchedule(Executor executor){

		ISchedule schedule = RunEnvironment.getInstance().getCurrentSchedule();

		ScheduleParameters agentStepDParamsPrimate = ScheduleParameters.createRepeating(1, 1, 3); //start, interval, priority (high number = higher priority)
		schedule.schedule(agentStepDParamsPrimate,executor,"processPrimates_decision");

		ScheduleParameters agentStepAParamsPrimate = ScheduleParameters.createRepeating(1, 1, 2); //start, interval, priority (high number = higher priority)
		schedule.schedule(agentStepAParamsPrimate,executor,"processPrimates_action");

		ScheduleParameters agentStepParams = ScheduleParameters.createRepeating(1, 1, 1);
		schedule.schedule(agentStepParams,executor,"envUpdate");
	}

	//used to update only the cells which have been modified
	public static void removeCellsUpdated(){
		for(Cell c : removeCellsToProcess){
			cellsToProcess.remove(c);
		}
		removeCellsToProcess.clear();
	}

	/*//used to ensure the same total amount of resources in each simulation
	private void setTotalResources(){
		//calculate the percent difference between the total resource level now and the target level
		int numbCells = Params.landscapeWidth*Params.landscapeWidth;
		double targetRes = numbCells*Params.foodDensity;
		double perDiff = (double)resAdded / (double)targetRes;
		double newTotal=0;

		//Divide each resource by the percent difference to make the total equal the target resource amount
		for (Cell c : allCells){
			double newRes = ((double)c.getMaxResourceLevel()/(double)perDiff);
			c.setMaxResourceLevel(newRes);
			c.setResourceLevel(newRes);
			newTotal = newTotal + newRes;
			if(newRes>1 || newRes<0)System.out.println("new res error "+ newRes);
		}
	}*/


	/*******************************************get and set methods***********************************************/

	public static ArrayList<Individual> getAllOMUs(){
		Collections.shuffle(allOMUs);
		return allOMUs;		
	}

	public static ArrayList<Cell> getAllCells(){
		Collections.shuffle(allCells);
		return allCells;		
	}

	public static Geography getGeog(){
		return geog;
	}

	public synchronized static void addToCellUpdateList(Cell c){  
		if(cellsToProcess.contains(c)==false)cellsToProcess.add(c);
	}

	public synchronized static void removeCellToUpdate(Cell c){
		removeCellsToProcess.add(c);
	}

	public static ArrayList<Cell> getCellsToProcess(){
		return cellsToProcess;
	}

}
