package multiLevelGroups;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Executor {

	private static final int pThreads = Params.numberOfThreads;
	private static ExecutorService executor;

	public Executor(){
		executor = Executors.newFixedThreadPool(pThreads);
	}
	
	//synchronous scheduling
	
	public static void makeDecisions(){
		//System.out.println("Starting input threads");

		Collection<Callable<Void>> tasks = new ArrayList<Callable<Void>>();
		Iterator<OMU> primateList = ModelSetup.getAllOMUs().iterator();
		while (primateList.hasNext()){
			Runnable worker = new Runnable_agentInputs(primateList.next());
			tasks.add(Executors.callable(worker,(Void)null));
		}

		// Wait until all threads are finish
		try {
			for (Future<?> f : executor.invokeAll(tasks)) { //invokeAll() blocks until ALL tasks submitted to executor complete
				f.get(); 
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (NullPointerException e){
			e.printStackTrace();
			System.out.println("null in inputs");
		}

		//System.out.println("Finished all input threads");

	}
	
	
	
	
	
	
	
	

	//n-asynchronous scheduling

	public static void processPrimates_decision(){

		//System.out.println("processing primates");
		//get all primates into an iterator 
		Iterator<OMU> OMUList = ModelSetup.getAllOMUs().iterator();

		//for all primates in order
		while (OMUList.hasNext()){

			//get subsample of primates
			ArrayList<OMU> OMUToProcess = new ArrayList<OMU>();
			for (int i=0; i<Params.numberOfThreads;i++){
				try{
					OMUToProcess.add(OMUList.next());
				} catch (java.util.NoSuchElementException e){

				}
			}

			//process subsample of the primate population

			//inputs prior to action
			Collection<Callable<Void>> tasks_inputs = new ArrayList<Callable<Void>>();
			for (OMU p:OMUToProcess){
				Runnable worker = new Runnable_OMUs(p);
				tasks_inputs.add(Executors.callable(worker,(Void)null));
			}

			try {
				for (Future<?> f : executor.invokeAll(tasks_inputs)) { //invokeAll() blocks until ALL tasks submitted to executor complete
					f.get(); 
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}catch (NullPointerException e){
				e.printStackTrace();
			}
		}

	}
	
	public static void processPrimates_action(){

		//System.out.println("processing primates");
		//get all primates into an iterator 
		Iterator<OMU> OMUList = ModelSetup.getAllOMUs().iterator();

		//for all primates in order
		while (OMUList.hasNext()){

			//get subsample of primates
			ArrayList<OMU> OMUToProcess = new ArrayList<OMU>();
			for (int i=0; i<Params.numberOfThreads;i++){
				try{
					OMUToProcess.add(OMUList.next());
				} catch (java.util.NoSuchElementException e){

				}
			}

			//process subsample of the primate population

			//inputs prior to action
			Collection<Callable<Void>> tasks_inputs = new ArrayList<Callable<Void>>();
			for (OMU p:OMUToProcess){
				Runnable worker = new Runnable_OMUs_move(p);
				tasks_inputs.add(Executors.callable(worker,(Void)null));
			}

			try {
				for (Future<?> f : executor.invokeAll(tasks_inputs)) { //invokeAll() blocks until ALL tasks submitted to executor complete
					f.get(); 
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}catch (NullPointerException e){
				e.printStackTrace();
			}
		}

	}
	
	public static void envUpdate(){

		//System.out.println("processing primates");
		//get all primates into an iterator 
		//Iterator<Cell> CellList = ModelSetup.getAllCells().iterator();
		Iterator<Cell> CellList = ModelSetup.getCellsToProcess().iterator();
		

		//for all primates in order
		while (CellList.hasNext()){

			//get subsample of primates
			ArrayList<Cell> CellToProcess = new ArrayList<Cell>();
			for (int i=0; i<Params.numberOfThreads;i++){
				try{
					CellToProcess.add(CellList.next());
				} catch (java.util.NoSuchElementException e){

				}
			}

			//process subsample of the primate population

			//inputs prior to action
			Collection<Callable<Void>> tasks_inputs = new ArrayList<Callable<Void>>();
			for (Cell c:CellToProcess){
				Runnable worker = new Runnable_Cells(c);
				tasks_inputs.add(Executors.callable(worker,(Void)null));
			}

			try {
				for (Future<?> f : executor.invokeAll(tasks_inputs)) { //invokeAll() blocks until ALL tasks submitted to executor complete
					f.get(); 
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}catch (NullPointerException e){
				e.printStackTrace();
			}
		}
		
		ModelSetup.removeCellsUpdated();

	}
	
	public static void endModel(){
		
		Observer.recordInfluencePatterns();
		
	}

}
