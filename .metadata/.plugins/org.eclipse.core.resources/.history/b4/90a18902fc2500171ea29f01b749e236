package multiLevelGroups;

import java.util.ArrayList;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;

import repast.simphony.context.Context;
import repast.simphony.space.gis.Geography;

public class Cell {

	//geometry
	Context context;
	Geography geog;
	Geometry geom;
	Coordinate coord; //centroid

	//resources
	double resources;
	double maxResources;
	double timeCounter=0;
	ArrayList<Cell> visibleSites;
	int id;
	ArrayList<Double> familiarityValues;
	ArrayList<OMU> familiarityIDs;
	


	//need to put in Marginal value theorum (declining "bite" size, as depletion occurs)
	
	/****************************Construct a Cell************************************/
	
	public Cell(Context con,double x,double y, double r, int i, Geography g){

		//set initial variables
		id=i;
		resources = r;
		maxResources = resources; //maintains initial conditions
		visibleSites = new ArrayList<Cell>();
		con.add(this);

		//place the cell on a gis landscape
		geog = g;
		geom = getHexShape(x,y);

		geog.move(this, geom);//sets the polygon onto the geography surface
		this.setCoord(geom.getCentroid().getCoordinate());
		timeCounter=0;
		
		familiarityValues = new ArrayList<Double>();
		familiarityIDs = new ArrayList<OMU>();
		//for(int nOMU =0;nOMU<Params.numbOMU;nOMU++){
		//	familiarity.add(Params.famGrow);
		//}

	}
	
	private Geometry getHexShape(double x, double y){

		GeometryFactory fac = new GeometryFactory();
		Geometry shape = null;
		Coordinate[] boundingCoords = new Coordinate[7];
		for(int i=0; i<7; i++) {
			if(i!=6){
				Coordinate c = new Coordinate(x + (Params.cellSize/(2.0))*Math.cos(i*2*Math.PI/6), y + (Params.cellSize/(2.0))*Math.sin(i*2*Math.PI/6));
				boundingCoords[i]=c;
			} else{
				Coordinate c = new Coordinate(x + (Params.cellSize/(2.0))*Math.cos(0*2*Math.PI/6), y + (Params.cellSize/(2.0))*Math.sin(0*2*Math.PI/6));
				boundingCoords[i]=c;
			}
		}
		LinearRing ring = fac.createLinearRing(boundingCoords);
		shape = fac.createPolygon(ring, null);

		return shape;
	}

	/****************************Cell methods************************************/
	
	//@ScheduledMethod(start=0, interval = 1,priority=2,shuffle=true)
		public void stepThreaded(){
			regrow();  
			change(); 
		}
		
		private void regrow(){
			//if(this.getId() == 1 && resources<maxResources)System.out.println("res="+resources);
			//check to see if resource is at max levels
			if (resources!=maxResources){
				//the resource will grow back until it's maximum level is reached
				if (resources<maxResources-Params.regrowthRate){
					resources = (resources+Params.regrowthRate);
				} else {
					resources = (maxResources);
				}
				//will degenerate if above max resource level (seasonality)
				if(resources>maxResources+Params.regrowthRate){
					resources = (resources-Params.regrowthRate);
				}else if (resources>maxResources && resources<maxResources+Params.regrowthRate){
					resources = maxResources;
				}
			} else {
				ModelSetup.removeCellToUpdate(this);
			}
			
		}
		
		private void change(){
			
		for(int i =0;i<familiarity.size();i++){
			double f = familiarity.get(i);
				if(f<Params.famMinCell){
					f=Params.famMinCell;
				} else {
					f = Math.max( (f - Params.cellChangeRate * (1-f)*f),Params.famMinCell);
					familiarity.set(i, f);
				}
			}
		}
		
		public void setVisibleNeigh(){
			Envelope envelope = new Envelope();
			envelope.init(coord);
			envelope.expandBy(Params.foodSearchRange);
			Iterable neigh = geog.getObjectsWithin(envelope, Cell.class);
			while (neigh.iterator().hasNext()){
				visibleSites.add((Cell)neigh.iterator().next());
			}
			envelope.setToNull();
		}
		
		public synchronized double eatMe(){
			
			double depletion = 0;
			if(resources-Params.depletionRate > 0){
				depletion = Params.depletionRate;
				resources = resources - depletion;
			} else{
				depletion = resources;
				resources = 0;
			}
			
			ModelSetup.addToCellUpdateList(this);
			
			return depletion;
		}
	
	/****************************Get and set methods************************************/
	
	public double getFamiliarity(int i){
		return familiarity.get(i);
	}
	
	public void setFamiliarity(int i, double d){
		familiarity.set(i, d);
	}
	
	public double getResourceLevel(){
		return resources;
	}
	public void setResourceLevel(double r){
		resources = r;
	}
	public double getMaxResourceLevel(){
		return maxResources;
	}
	public void setMaxResourceLevel(double rm){
		maxResources = rm;
	}
	public Coordinate getCoord(){
		return coord;
	}
	private void setCoord(Coordinate c){
		coord = c;
	}
	public int getId(){
		return id;
	}
	
	
	


}
