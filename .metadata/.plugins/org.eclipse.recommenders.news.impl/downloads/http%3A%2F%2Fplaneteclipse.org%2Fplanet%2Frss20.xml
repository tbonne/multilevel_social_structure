<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Dirk Fauth: OSGi Event Admin – Publish &amp; Subscribe</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7593</guid>
	<link>http://blog.vogella.com/2017/05/16/osgi-event-admin-publish-subscribe/</link>
	<description>&lt;p&gt;In this blog post I want to write about the publish &amp;amp; subscribe mechanism in OSGi, provided via the OSGi &lt;em&gt;Event Admin Service&lt;/em&gt;. Of course I will show this in combination with OSGi Declarative Services, because this is the technology I currently like very much, as you probably know from my previous blog posts.&lt;/p&gt;
&lt;p&gt;I will start with some basics and then show an example as usual. At last I will give some information about how to use the event mechanism in Eclipse RCP development, especially related to the combination between OSGi services and the GUI.&lt;/p&gt;
&lt;p&gt;If you want to read further details on the Event Admin Service Specification have a look at the &lt;a href=&quot;https://www.osgi.org/developer/specifications/&quot; target=&quot;_blank&quot;&gt;OSGi Spec&lt;/a&gt;. In Release 6 it is covered in the Compendium Specification Chapter 113.&lt;/p&gt;
&lt;p&gt;Let’s start with the basics. The &lt;em&gt;Event Admin Service&lt;/em&gt; is based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot; target=&quot;_blank&quot;&gt;Publish-Subscribe pattern&lt;/a&gt;. There is an event publisher and an event consumer. Both do not know each other in any way, which provides a high decoupling. Simplified you could say, the event publisher sends an event to a channel, not knowing if anybody will receive that event. On the other side there is an event consumer ready to receive events, not knowing if there is anybody available for sending events. This simplified view is shown in the following picture:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;simple_event&quot; class=&quot;aligncenter wp-image-7594 size-full&quot; height=&quot;211&quot; src=&quot;http://blog.vogella.com/wp-content/uploads/2017/05/simple_event.png&quot; width=&quot;523&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Technically both sides are using the &lt;em&gt;Event Admin Service&lt;/em&gt; in some way. The event publisher uses it directly to send an event to the channel. The event consumer uses it indirectly by registering an event handler to the EventAdmin to receive events. This can be done programmatically. But with OSGi DS it is very easy to register an event handler by using the whiteboard pattern.&lt;/p&gt;
&lt;h2&gt;Event&lt;/h2&gt;
&lt;p&gt;An &lt;code&gt;Event&lt;/code&gt; object has a topic and some event properties. It is an immutable object to ensure that every handler gets the same object with the same state.&lt;/p&gt;
&lt;p&gt;The topic defines the type of the event and is intended to serve as first-level filter for determining which handlers should receive the event. It is a String arranged in a hierarchical namespace. And the recommendation is to use a convention similar to the Java package name scheme by using reverse domain names (&lt;code&gt;fully/qualified/package/ClassName/ACTION&lt;/code&gt;). Doing this ensures uniqueness of events. This is of course only a recommendation and you are free to use pseudo class names to make the topic better readable.&lt;/p&gt;
&lt;p&gt;Event properties are used to provide additional information about the event. The key is a String and the value can be technically any object. But it is recommended to only use String objects and primitive type wrappers. There are two reasons for this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Other types cannot be passed to handlers that reside external from the Java VM.&lt;/li&gt;
&lt;li&gt;Other classes might be mutable, which means any handler that receives the event could change values. This break the immutability rule for events.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Common Bundle&lt;/h2&gt;
&lt;p&gt;It is some kind of best practice to place common stuff in a common bundle to which the event publisher bundle and the event consumer bundle can have a dependency to. In our case this will only be the definition of the supported topics and property keys in a constants class, to ensure that both implementations share the same definition, without the need to be dependent on each other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project &lt;em&gt;org.fipro.mafia.common&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create a new package &lt;code&gt;org.fipro.mafia.common&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new class &lt;code&gt;MafiaBossConstants&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public final class MafiaBossConstants {

    private MafiaBossConstants() {
        // private default constructor for constants class
        // to avoid someone extends the class
    }

    public static final String TOPIC_BASE = &quot;org/fipro/mafia/Boss/&quot;;
    public static final String TOPIC_CONVINCE = TOPIC_BASE + &quot;CONVINCE&quot;;
    public static final String TOPIC_ENCASH = TOPIC_BASE + &quot;ENCASH&quot;;
    public static final String TOPIC_SOLVE = TOPIC_BASE + &quot;SOLVE&quot;;
    public static final String TOPIC_ALL = TOPIC_BASE + &quot;*&quot;;

    public static final String PROPERTY_KEY_TARGET = &quot;target&quot;;

}&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;PDE
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;MANIFEST.MF&lt;/em&gt; file and on the &lt;em&gt;Overview&lt;/em&gt; tab set the &lt;em&gt;Version&lt;/em&gt; to 1.0.0 (remove the qualifier).&lt;/li&gt;
&lt;li&gt;Switch to the &lt;em&gt;Runtime&lt;/em&gt; tab and export the &lt;em&gt;org.fipro.mafia.common&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Specify the version 1.0.0 on the package via &lt;em&gt;Properties…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bndtools
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;bnd.bnd&lt;/em&gt; file&lt;/li&gt;
&lt;li&gt;Add the package &lt;em&gt;org.fipro.mafia.common&lt;/em&gt; to the &lt;em&gt;Export Packages&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;code&gt;MafiaBossConstants&lt;/code&gt; we specify the topic base with a pseudo class &lt;em&gt;org.fipro.mafia.Boss&lt;/em&gt;, which results in the topic base &lt;em&gt;org/fipro/mafia/Boss&lt;/em&gt;. We specify action topics that start with the topic base and end with the actions CONVINCE, ENCASH and SOLVE. And additionally we specify a topic that starts with the base and ends with the wildcard ‘*’.&lt;/p&gt;
&lt;p&gt;These constants will be used by the event publisher and the event consumer soon.&lt;/p&gt;
&lt;h2&gt;Event Publisher&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Event Publisher&lt;/em&gt; uses the &lt;em&gt;Event Admin Service&lt;/em&gt; to send events synchronously or asynchronously. Using DS this is pretty easy.&lt;/p&gt;
&lt;p&gt;We will create an &lt;em&gt;Event Publisher&lt;/em&gt; based on the idea of a mafia boss. The boss simply commands a job execution and does not care who is doing it. Also it is not of interest if there are many people doing the same job. The job has to be done!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;PDE
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;MANIFEST.MF&lt;/em&gt; file of the &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt; project and switch to the &lt;em&gt;Dependencies&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following dependencies on the &lt;em&gt;Imported Packages&lt;/em&gt; side:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common (1.0.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.component.annotations (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.event (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mark &lt;em&gt;org.osgi.service.component.annotations&lt;/em&gt; as &lt;em&gt;Optional&lt;/em&gt; via &lt;em&gt;Properties…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the upper version boundaries to the &lt;em&gt;Import-Package&lt;/em&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bndtools
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;bnd.bnd&lt;/em&gt; file of the &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt; project and switch to the &lt;em&gt;Build&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following bundles to the &lt;em&gt;Build Path&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.eventadmin&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt;
Adding &lt;code&gt;org.osgi.service.event&lt;/code&gt; to the &lt;em&gt;Imported Packages&lt;/em&gt; with PDE on a current Equinox target will provide a package version 1.3.1. You need to change this to 1.3.0 if you intend to run the same bundle with a different &lt;em&gt;Event Admin Service&lt;/em&gt; implementation. In general it is a bad practice to rely on a bugfix version. Especially when thinking about interfaces, as any change to an interface typically is a breaking change.&lt;br /&gt;
To clarify the statement above. As the package &lt;code&gt;org.osgi.service.event&lt;/code&gt; contains more than just the &lt;code&gt;EventAdmin&lt;/code&gt; interface, the bugfix version increase is surely correct in Equinox, as there was probably a bugfix in some code inside the package. The only bad thing is to restrict the package wiring on the consumer side to a bugfix version, as this would restrict your code to only run with the Equinox implementation of the &lt;em&gt;Event Admin Service&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new package &lt;code&gt;org.fipro.mafia.boss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new class &lt;code&gt;BossCommand&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=boss&quot; },
    service = BossCommand.class)
public class BossCommand {

    @Reference
    EventAdmin eventAdmin;

    @Descriptor(&quot;As a mafia boss you want something to be done&quot;)
    public void boss(
        @Descriptor(&quot;the command that should be executed. &quot;
            + &quot;possible values are: convince, encash, solve&quot;)
        String command,
        @Descriptor(&quot;who should be 'convinced', &quot;
            + &quot;'asked for protection money' or 'finally solved'&quot;)
        String target) {

        // create the event properties object
        Map&amp;lt;String, Object&amp;gt; properties = new HashMap&amp;lt;&amp;gt;();
        properties.put(MafiaBossConstants.PROPERTY_KEY_TARGET, target);
        Event event = null;

        switch (command) {
            case &quot;convince&quot;:
                event = new Event(MafiaBossConstants.TOPIC_CONVINCE, properties);
                break;
            case &quot;encash&quot;:
                event = new Event(MafiaBossConstants.TOPIC_ENCASH, properties);
                break;
            case &quot;solve&quot;:
                event = new Event(MafiaBossConstants.TOPIC_SOLVE, properties);
                break;
            default:
                System.out.println(&quot;Such a command is not known!&quot;);
        }

        if (event != null) {
            eventAdmin.postEvent(event);
        }
    }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The code snippet above uses the annotation &lt;code&gt;@Descriptor&lt;/code&gt; to specify additional information for the command. This information will be shown when executing &lt;strong&gt;&lt;em&gt;help boss&lt;/em&gt;&lt;/strong&gt; in the OSGi console. To make this work with PDE you need to import the package &lt;code&gt;org.apache.felix.service.command&lt;/code&gt; with &lt;code&gt;status=provisional&lt;/code&gt;. Because the PDE editor does not support adding additional information to package imports, you need to do this manually in the &lt;em&gt;MANIFEST.MF&lt;/em&gt; tab of the &lt;em&gt;Plugin Manifest Editor&lt;/em&gt;. The &lt;code&gt;Import-Package&lt;/code&gt; header would look like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;Import-Package: org.apache.felix.service.command;status=provisional;version=&quot;0.10.0&quot;,
 org.fipro.mafia.common;version=&quot;[1.0.0,2.0.0)&quot;,
 org.osgi.service.component.annotations;version=&quot;[1.3.0,2.0.0)&quot;;resolution:=optional,
 org.osgi.service.event;version=&quot;[1.3.0,2.0.0)&quot;&lt;/pre&gt;
&lt;p&gt;With Bndtools you need to add &lt;code&gt;org.apache.felix.gogo.runtime&lt;/code&gt; to the &lt;em&gt;Build Path&lt;/em&gt; in the &lt;em&gt;bnd.bnd&lt;/em&gt; file so the &lt;code&gt;@Descriptor&lt;/code&gt; annotation can be resolved.&lt;/p&gt;
&lt;p&gt;There are three things to notice in the &lt;code&gt;BossCommand&lt;/code&gt; implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a mandatory reference to &lt;code&gt;EventAdmin&lt;/code&gt; which is required for sending events.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Event&lt;/code&gt; objects are created using a specific topic and a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; that contains the additional event properties.&lt;/li&gt;
&lt;li&gt;The event is sent asynchronously via &lt;code&gt;EventAdmin#postEvent(Event)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;BossCommand&lt;/code&gt; will create an event using the topic that corresponds to the given &lt;em&gt;command&lt;/em&gt; parameter. The &lt;em&gt;target&lt;/em&gt; parameter will be added to a map that is used as event properties. This event will then be send to a channel via the &lt;code&gt;EventAdmin&lt;/code&gt;. In the example we use &lt;code&gt;EventAdmin#postEvent(Event)&lt;/code&gt; which sends the event asynchronously. That means, we send the event but do not wait until available handlers have finished the processing. If it is required to wait until the processing is done, you need to use &lt;code&gt;EventAdmin#sendEvent(Event)&lt;/code&gt;, which sends the event synchronously. But sending events synchronously is significantly more expensive, as the &lt;em&gt;Event Admin Service&lt;/em&gt; implementation needs to ensure that every handler has finished processing before it returns. It is therefore recommended to prefer the usage of asynchronous event processing.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The code snippet uses the &lt;em&gt;Field Strategy&lt;/em&gt; for referencing the &lt;code&gt;EventAdmin&lt;/code&gt;. If you are using PDE this will work with Eclipse Oxygen. With Eclipse Neon you need to use the &lt;em&gt;Event Strategy&lt;/em&gt;. In short, you need to write the &lt;em&gt;bind&lt;/em&gt;-event-method for referencing &lt;code&gt;EventAdmin&lt;/code&gt; because Equinox DS supports only DS 1.2 and the annotation processing in Eclipse Neon also only supports the DS 1.2 style annotations.&lt;/p&gt;
&lt;h2&gt;Event Consumer&lt;/h2&gt;
&lt;p&gt;In our example the boss does not have to tell someone explicitly to do the job. He just mentions that the job has to be done. Let’s assume we have a small organization without hierarchies. So we skip the captains etc. and simply implement some soldiers. They have specialized, so we have three soldiers, each listening to one special topic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project &lt;em&gt;org.fipro.mafia.soldier&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;PDE
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;MANIFEST.MF&lt;/em&gt; file of the &lt;em&gt;org.fipro.mafia.soldier&lt;/em&gt; project and switch to the &lt;em&gt;Dependencies&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following dependencies on the &lt;em&gt;Imported Packages&lt;/em&gt; side:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common (1.0.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.component.annotations (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.osgi.service.event (1.3.0)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mark &lt;em&gt;org.osgi.service.component.annotations&lt;/em&gt; as &lt;em&gt;Optional&lt;/em&gt; via &lt;em&gt;Properties…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the upper version boundaries to the &lt;em&gt;Import-Package&lt;/em&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bndtools
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;bnd.bnd&lt;/em&gt; file of the &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt; project and switch to the &lt;em&gt;Build&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Add the following bundles to the &lt;em&gt;Build Path&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.eventadmin&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a new package &lt;code&gt;org.fipro.mafia.soldier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create the following three soldiers &lt;code&gt;Luigi&lt;/code&gt;, &lt;code&gt;Mario&lt;/code&gt; and &lt;code&gt;Giovanni&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = EventConstants.EVENT_TOPIC
        + &quot;=&quot; + MafiaBossConstants.TOPIC_CONVINCE)
public class Luigi implements EventHandler {

    @Override
    public void handleEvent(Event event) {
        System.out.println(&quot;Luigi: &quot;
        + event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET)
        + &quot; was 'convinced' to support our family&quot;);
    }

}&lt;/pre&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = EventConstants.EVENT_TOPIC
        + &quot;=&quot; + MafiaBossConstants.TOPIC_ENCASH)
public class Mario implements EventHandler {

    @Override
    public void handleEvent(Event event) {
        System.out.println(&quot;Mario: &quot;
        + event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET)
        + &quot; payed for protection&quot;);
    }

}&lt;/pre&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = EventConstants.EVENT_TOPIC
        + &quot;=&quot; + MafiaBossConstants.TOPIC_SOLVE)
public class Giovanni implements EventHandler {

    @Override
    public void handleEvent(Event event) {
        System.out.println(&quot;Giovanni: We 'solved' the issue with &quot;
        + event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET));
    }

}&lt;/pre&gt;
&lt;p&gt;Technically we have created special &lt;code&gt;EventHandler&lt;/code&gt; for different topics. You should notice the following facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are using OSGi DS to register the event handler using the whiteboard pattern. On the consumer side we don’t need to know the &lt;code&gt;EventAdmin&lt;/code&gt; itself.&lt;/li&gt;
&lt;li&gt;We need to implement &lt;code&gt;org.osgi.service.event.EventHandler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We need to register for a topic via service property &lt;strong&gt;&lt;em&gt;event.topics&lt;/em&gt;&lt;/strong&gt;, otherwise the handler will not listen for any event.&lt;/li&gt;
&lt;li&gt;Via &lt;code&gt;Event#getProperty(String)&lt;/code&gt; we are able to access event property values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following service properties are supported by event handlers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Registration Property&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;event.topics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Specify the topics of interest to an &lt;code&gt;EventHandler&lt;/code&gt; service. This property is mandatory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i&gt;event.filter&lt;/i&gt;&lt;/td&gt;
&lt;td&gt;Specify a filter to further select events of interest to an &lt;code&gt;EventHandler&lt;/code&gt; service. This property is optional.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;event.delivery&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Specifying the delivery qualities requested by an &lt;code&gt;EventHandler&lt;/code&gt; service. This property is optional.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The property keys and some default keys for event properties are specified in &lt;code&gt;org.osgi.service.event.EventConstants&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Launch the example&lt;/h2&gt;
&lt;p&gt;Before moving on and explaining further, let’s start the example and verify that each command from the boss is only handled by one soldier.&lt;/p&gt;
&lt;p&gt;With PDE perform the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the menu entry &lt;em&gt;Run -&amp;gt; Run Configurations…&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the tree view, right click on the &lt;em&gt;OSGi Framework&lt;/em&gt; node and select &lt;em&gt;New&lt;/em&gt; from the context menu&lt;/li&gt;
&lt;li&gt;Specify a name, e.g. &lt;em&gt;OSGi Event Mafia&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deselect All&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select the following bundles&lt;br /&gt;
(note that we are using Eclipse Oxygen, in previous Eclipse versions &lt;em&gt;org.apache.felix.scr&lt;/em&gt; and &lt;em&gt;org.eclipse.osgi.util&lt;/em&gt; are not required)&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.boss&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.soldier&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.command&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.runtime&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.gogo.shell&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.console&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OSGi framework and DS bundles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.apache.felix.scr&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.ds&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.services&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.osgi.util&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equinox Event Admin&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.eclipse.equinox.event&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that &lt;em&gt;Default Auto-Start&lt;/em&gt; is set to &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With Bndtools perform the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;launch.bndrun&lt;/em&gt; file in the &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt; project&lt;/li&gt;
&lt;li&gt;On the &lt;em&gt;Run&lt;/em&gt; tab add the following bundles to the &lt;em&gt;Run Requirements&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.boss&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.common&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;org.fipro.mafia.soldier&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Resolve&lt;/em&gt; to ensure all required bundles are added to the &lt;em&gt;Run Bundles&lt;/em&gt; via auto-resolve&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Run OSGi&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Execute the boss command to see the different results. This can look similar to the following:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;osgi&amp;gt; boss convince Angelo
osgi&amp;gt; Luigi: Angelo was 'convinced' to support our family
boss encash Wong
osgi&amp;gt; Mario: Wong payed for protection
boss solve Tattaglia
osgi&amp;gt; Giovanni: We 'solved' the issue with Tattaglia&lt;/pre&gt;
&lt;h2&gt;Handle multiple event topics&lt;/h2&gt;
&lt;p&gt;It is also possible to register for multiple event topics. Say &lt;code&gt;Pete&lt;/code&gt; is a tough guy who is good in ENCASH and SOLVE issues. So he registers for those topics.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = {
        EventConstants.EVENT_TOPIC + &quot;=&quot; + MafiaBossConstants.TOPIC_CONVINCE,
        EventConstants.EVENT_TOPIC + &quot;=&quot; + MafiaBossConstants.TOPIC_SOLVE })
public class Pete implements EventHandler {

    @Override
    public void handleEvent(Event event) {
        System.out.println(&quot;Pete: I took care of &quot;
        + event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET));
    }

}&lt;/pre&gt;
&lt;p&gt;As you can see the service property &lt;em&gt;&lt;strong&gt;event.topics&lt;/strong&gt;&lt;/em&gt; is declared multiple times via the &lt;code&gt;@Component&lt;/code&gt; annotation type element property. This way an array of Strings is configured for the service property, so the handler reacts on both topics.&lt;/p&gt;
&lt;p&gt;If you execute the example now and call &lt;em&gt;boss convince xxx&lt;/em&gt; or &lt;em&gt;boss solve xxx&lt;/em&gt; you will notice that &lt;code&gt;Pete&lt;/code&gt; is also responding.&lt;/p&gt;
&lt;p&gt;It is also possible to use the asterisk wildcard as last token of a topic. This way the handler will receive all events for topics that start with the left side of the wildcard.&lt;/p&gt;
&lt;p&gt;Let’s say we have a very motivated young guy called &lt;code&gt;Ray&lt;/code&gt; who wants to prove himself to the boss. So he takes every command from the boss. For this we set the service property &lt;code&gt;event.topics=org/fipro/mafia/Boss/*&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = EventConstants.EVENT_TOPIC
        + &quot;=&quot; + MafiaBossConstants.TOPIC_ALL)
public class Ray implements EventHandler {

    @Override
    public void handleEvent(Event event) {
        String topic = event.getTopic();
        Object target = event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET);

        switch (topic) {
            case MafiaBossConstants.TOPIC_CONVINCE:
                System.out.println(&quot;Ray: I helped in punching the shit out of&quot; + target);
                break;
            case MafiaBossConstants.TOPIC_ENCASH:
                System.out.println(&quot;Ray: I helped getting the money from &quot; + target);
                break;
            case MafiaBossConstants.TOPIC_SOLVE:
                System.out.println(&quot;Ray: I helped killing &quot; + target);
                break;
            default: System.out.println(&quot;Ray: I helped with whatever was requested!&quot;);
        }
    }

}&lt;/pre&gt;
&lt;p&gt;Executing the example again will show that &lt;code&gt;Ray&lt;/code&gt; is responding on every boss command.&lt;/p&gt;
&lt;p&gt;It is also possible to filter events based on event properties by setting the service property &lt;em&gt;&lt;strong&gt;event.filter&lt;/strong&gt;&lt;/em&gt;. The value needs to be an LDAP filter. For example, although &lt;code&gt;Ray&lt;/code&gt; is a motivated and loyal soldier, he refuses to handle events that target his friend &lt;em&gt;Sonny&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The following snippet shows how to specify a filter that excludes event processing if the target is &lt;em&gt;Sonny&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = {
        EventConstants.EVENT_TOPIC + &quot;=&quot; + MafiaBossConstants.TOPIC_ALL,
        EventConstants.EVENT_FILTER + &quot;=&quot; + &quot;(!(target=Sonny))&quot;})
public class Ray implements EventHandler {&lt;/pre&gt;
&lt;p&gt;Execute the example and call two commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;boss solve Angelo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;boss solve Sonny&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will notice that &lt;code&gt;Ray&lt;/code&gt; will respond on the first call, but he will not show up on the second call.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The filter expression can only be applied on event properties. It is not possible to use that filter on service properties.&lt;/p&gt;
&lt;p&gt;At last it is possible to configure in which order the event handler wants the events to be delivered. This can either be ordered in the same way they are posted, or unordered. The service property &lt;strong&gt;&lt;em&gt;event.delivery&lt;/em&gt;&lt;/strong&gt; can be used to change the default behavior, which is to receive the events from a single thread in the same order as they were posted.&lt;/p&gt;
&lt;p&gt;If an event handler does not need to receive events in the order as they were posted, you need to specify the service property &lt;code&gt;event.delivery=async.unordered&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property = {
        EventConstants.EVENT_TOPIC + &quot;=&quot;
            + MafiaBossConstants.TOPIC_ALL,
        EventConstants.EVENT_FILTER + &quot;=&quot;
            + &quot;(!(target=Sonny))&quot;,
        EventConstants.EVENT_DELIVERY + &quot;=&quot;
            + EventConstants.DELIVERY_ASYNC_UNORDERED})&lt;/pre&gt;
&lt;p&gt;The value for ordered delivery is &lt;code&gt;async.ordered&lt;/code&gt; which is the default. The values are also defined in the &lt;code&gt;EventConstants&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Capabilities&lt;/h2&gt;
&lt;p&gt;By using the event mechanism the code is highly decoupled. In general this is a good thing, but it also makes it hard to identify issues. One common issue in Eclipse RCP for example is to forget to automatically start the bundle &lt;em&gt;org.eclipse.equinox.event&lt;/em&gt;. Things will simply not work in such a case, without any errors or warnings shown on startup.&lt;/p&gt;
&lt;p&gt;The reason for this is that the related interfaces like &lt;code&gt;EventAdmin&lt;/code&gt; and &lt;code&gt;EventHandler&lt;/code&gt; are located in the bundle &lt;em&gt;org.eclipse.osgi.services&lt;/em&gt;. The bundle wiring therefore shows that everything is ok on startup, because all interfaces and classes are available. But we require a bundle that contains an implementation of &lt;code&gt;EventAdmin&lt;/code&gt;. If you remember my &lt;a href=&quot;http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Getting Started Tutorial&lt;/a&gt;, such a requirement can be specified by using capabilities.&lt;/p&gt;
&lt;p&gt;To show the implications, let’s play with the &lt;em&gt;Run Configuration&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uncheck &lt;em&gt;org.eclipse.equinox.event&lt;/em&gt; from the list of bundles&lt;/li&gt;
&lt;li&gt;Launch the configuration&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;lb&lt;/code&gt; on the command line (or &lt;code&gt;ss&lt;/code&gt; on Equinox if you are more familiar with that) and check the bundle states
&lt;ul&gt;
&lt;li&gt;Notice that all bundles are in ACTIVE state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;scr:list&lt;/code&gt; (or &lt;code&gt;list&lt;/code&gt; on Equinox &amp;lt; Oxygen) to check the state of the DS components
&lt;ul&gt;
&lt;li&gt;Notice that &lt;code&gt;org.fipro.mafia.boss.BossCommand&lt;/code&gt; has an &lt;em&gt;unsatisfied reference&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Notice that all other &lt;code&gt;EventHandler&lt;/code&gt; services are &lt;em&gt;satisfied&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is of course a the correct behavior. The &lt;code&gt;BossCommand&lt;/code&gt; service has a mandatory reference to &lt;code&gt;EventAdmin&lt;/code&gt; and there is no such service available. So it has an &lt;em&gt;unsatisfied reference&lt;/em&gt;. The &lt;code&gt;EventHandler&lt;/code&gt; implementations do not have such a dependency, so they are satisfied. And that is even fine when thinking in the publish &amp;amp; subscribe pattern. They can be active and waiting for events to process, even if there is nobody available to send an event. But it makes it hard to find the issue. And when using Tycho and the Surefire Plugin to execute tests, it will even never work because nobody tells the test runtime that &lt;em&gt;org.eclipse.equinox.event&lt;/em&gt; needs to be available and started in advance.&lt;/p&gt;
&lt;p&gt;This can be solved by adding the &lt;code&gt;Require-Capability&lt;/code&gt; header to require an &lt;code&gt;osgi.service&lt;/code&gt; for &lt;code&gt;objectClass=org.osgi.service.event.EventAdmin&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;Require-Capability: osgi.service;
 filter:=&quot;(objectClass=org.osgi.service.event.EventAdmin)&quot;&lt;/pre&gt;
&lt;p&gt;By specifying the &lt;code&gt;Require-Capability&lt;/code&gt; header like above, the capability will be checked when the bundles are resolved. So starting the example after the &lt;code&gt;Require-Capability&lt;/code&gt; header was added will show an error and the bundle &lt;em&gt;org.fipro.mafia.boss&lt;/em&gt; will not be activated.&lt;/p&gt;
&lt;p&gt;If you add the bundle &lt;em&gt;org.eclipse.equinox.event&lt;/em&gt; again to the &lt;em&gt;Run Configuration&lt;/em&gt; and launch it again, there are no issues.&lt;/p&gt;
&lt;p&gt;As p2 does still not support OSGi capabilities, the &lt;em&gt;p2.inf&lt;/em&gt; file needs to be created in the &lt;em&gt;META-INF&lt;/em&gt; folder with the following content:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;requires.1.namespace = osgi.service
requires.1.name = org.osgi.service.event.EventAdmin&lt;/pre&gt;
&lt;p&gt;Typically you would specify the &lt;code&gt;Require-Capability&lt;/code&gt; to the &lt;code&gt;EventAdmin&lt;/code&gt; service with the directive &lt;code&gt;effective:=active&lt;/code&gt;. This implies that the OSGi framework will resolve the bundle &lt;span style=&quot;text-decoration: underline;&quot;&gt;without&lt;/span&gt; checking if another bundle provides the capability. It can then be more seen as a documentation which services are required from looking into the &lt;em&gt;MANIFEST.MF&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Important Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
Specifying the &lt;code&gt;Require-Capability&lt;/code&gt; header and the p2 capabilities for &lt;code&gt;org.osgi.service.event.EventAdmin&lt;/code&gt; will only work with Eclipse Oxygen. I contributed the necessary changes to Equinox for Oxygen M1 with &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=416047&quot; target=&quot;_blank&quot;&gt;Bug 416047&lt;/a&gt;. With a &lt;em&gt;org.eclipse.equinox.event&lt;/em&gt; bundle in a version &amp;gt;= 1.4.0 you should be able to specify the capabilities. In previous versions the necessary &lt;code&gt;Provide-Capability&lt;/code&gt; and p2 capability configuration in that bundle are missing.&lt;/p&gt;
&lt;h2&gt;Handling events in Eclipse RCP UI&lt;/h2&gt;
&lt;p&gt;When looking at the architecture of an Eclipse RCP application, you will notice that the UI layer is not created via OSGi DS (actually that is not a surprise!). And we can not simply say that our view parts are created via DS, because the lifecycle of a part is controlled by other mechanics. But as an Eclipse RCP application is typcially an application based on OSGi, all the OSGi mechanisms can be used. Of course not that convenient as with using OSGi DS directly.&lt;/p&gt;
&lt;p&gt;The direction from the UI layer to the OSGi service layer is pretty easy. You simply need to retrieve the service you want to uw3. With Eclipse 4 you simply get the desired service injected using &lt;code&gt;@Inject&lt;/code&gt; or &lt;code&gt;@Inject&lt;/code&gt; in combination with &lt;code&gt;@Service&lt;/code&gt; since Eclipse Oxygen (see &lt;a href=&quot;http://blog.vogella.com/2017/03/15/osgi-declarative-services-news-in-eclipse-oxygen/&quot; target=&quot;_blank&quot;&gt;OSGi Declarative Services news in Eclipse Oxygen&lt;/a&gt;). With Eclipse 3.x you needed to retrieve the service programmatically via the &lt;code&gt;BundleContext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other way to communicate from a service to the UI layer is something different. There are two ways to consider from my point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make use of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot; target=&quot;_blank&quot;&gt;Observer pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make use of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot; target=&quot;_blank&quot;&gt;Publish &amp;amp; Subscribe pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post is about the event mechanism in OSGi, so I don’t want to go in detail with the observer pattern approach. It simply means that you extend the service interface to accept listeners to perform callbacks. Which in return means you need to retrieve the service in the view part for example, and register a callback function from there.&lt;/p&gt;
&lt;p&gt;With the Publish &amp;amp; Subscribe pattern we register an &lt;code&gt;EventHandler&lt;/code&gt; that reacts on events. It is a similar approach to the Observer pattern, with some slight differences. But this is not a design pattern blog post, we are talking about the event mechanism. And we already registered an &lt;code&gt;EventHandler&lt;/code&gt; using OSGi DS. The difference to the scenario using DS is that we need to register the &lt;code&gt;EventHandler&lt;/code&gt; programmatically. For OSGi experts that used the event mechanism before DS came up, this is nothing new. For all others that learn about it, it could be interesting.&lt;/p&gt;
&lt;p&gt;The following snippet shows how to retrieve a &lt;code&gt;BundleContext&lt;/code&gt; instance and register a service programmatically. In earlier days this was done in an &lt;code&gt;Activator&lt;/code&gt;, as there you have access to the &lt;code&gt;BundleContext&lt;/code&gt;. Nowadays it is recommended to use the &lt;code&gt;FrameworkUtil&lt;/code&gt; class to retrieve the &lt;code&gt;BundleContext&lt;/code&gt; when needed, and to avoid &lt;code&gt;Activator&lt;/code&gt;s to reduce startup time.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;private ServiceRegistration&amp;lt;?&amp;gt; eventHandler;

...

// retrieve the bundle of the calling class
Bundle bundle = FrameworkUtil.getBundle(getClass());
BundleContext bc = (bundle != null) ? bundle.getBundleContext() : null;
if (bc != null) {
    // create the service properties instance
    Dictionary&amp;lt;String, Object&amp;gt; properties = new Hashtable&amp;lt;&amp;gt;();
    properties.put(EventConstants.EVENT_TOPIC, MafiaBossConstants.TOPIC_ALL);
    // register the EventHandler service
    eventHandler = bc.registerService(
        EventHandler.class.getName(),
        new EventHandler() {

            @Override
            public void handleEvent(Event event) {
                // ensure to update the UI in the UI thread
                Display.getDefault().asyncExec(() -&amp;gt; handlerLabel.setText(
                        &quot;Received boss command &quot;
                            + event.getTopic()
                            + &quot; for target &quot;
                            + event.getProperty(MafiaBossConstants.PROPERTY_KEY_TARGET)));
            }
        },
        properties);
}&lt;/pre&gt;
&lt;p&gt;This code can be technically added anywhere in the UI code, e.g. in a view, an editor or a handler. But of course you should be aware that the event handler also should be unregistered once the connected UI class is destroyed. For example, you implement a view part that registers a listener similar to the above to update the UI everytime an event is received. That means the handler has a reference to a UI element that should be updated. If the part is destroyed, also the UI element is destroyed. If you don’t unregister the &lt;code&gt;EventHandler&lt;/code&gt; when the part is destroyed, it will still be alive and react on events and probably cause exceptions without proper disposal checks. It is also a cause for memory leaks, as the &lt;code&gt;EventHandler&lt;/code&gt; references a UI element instance that is already disposed but can not be cleaned up by the GC as it is still referenced.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The event handling is executed in its own event thread. Updates to the UI can only be performed in the &lt;em&gt;main&lt;/em&gt; or &lt;em&gt;UI thread&lt;/em&gt;, otherwise you will get a &lt;code&gt;SWTException&lt;/code&gt; for &lt;em&gt;Invalid thread access&lt;/em&gt;. Therefore it is necessary to ensure that UI updates performed in an event handler are executed in the UI thread. For further information have a look at &lt;a href=&quot;http://www.vogella.com/tutorials/EclipseJobs/article.html&quot; target=&quot;_blank&quot;&gt;Eclipse Jobs and Background Processing&lt;/a&gt;.&lt;br /&gt;
For the UI synchronization you should also consider using asynchronous execution via &lt;code&gt;Display#asyncExec()&lt;/code&gt; or &lt;code&gt;UISynchronize#asyncExec()&lt;/code&gt;. Using synchronous execution via &lt;code&gt;syncExec()&lt;/code&gt; will block the event handler thread until the UI update is done.&lt;/p&gt;
&lt;p&gt;If you stored the &lt;code&gt;ServiceRegistration&lt;/code&gt; object returned by &lt;code&gt;BundleContext#registerService()&lt;/code&gt; as shown in the example above, the following snippet can be used to unregister the handler if the part is destroyed:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;if (eventHandler != null) {
    eventHandler.unregister();
}&lt;/pre&gt;
&lt;p&gt;In Eclipse 3.x this needs to be done in the overriden &lt;code&gt;dispose()&lt;/code&gt; method. In Eclipse 4 it can be done in the method annotated with &lt;code&gt;@PreDestroy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
Ensure that the bundle that contains the code is in ACTIVE state so there is a &lt;code&gt;BundleContext&lt;/code&gt;. This can be achieved by setting &lt;code&gt;Bundle-ActivationPolicy: lazy&lt;/code&gt; in the &lt;em&gt;MANIFEST.MF&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Handling events in Eclipse RCP UI with Eclipse 4&lt;/h2&gt;
&lt;p&gt;In Eclipse 4 the event handling mechanism is provided to the RCP development via the &lt;code&gt;EventBroker&lt;/code&gt;. The &lt;code&gt;EventBroker&lt;/code&gt; is a service that uses the &lt;code&gt;EventAdmin&lt;/code&gt; and additionally provides injection support. To learn more about the &lt;code&gt;EventBroker&lt;/code&gt; and the event mechanism provided by Eclipse 4 you should read the related tutorials, like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vogella.com/tutorials/Eclipse4EventSystem/article.html&quot; target=&quot;_blank&quot;&gt;Eclipse 4 event system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codecentric.de/en/2015/04/osgi-declarative-services-and-the-event-bus-eclipse-rcp-cookbook/&quot; target=&quot;_blank&quot;&gt;OSGi declarative services and the event bus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are focusing on the event consumer here. Additionally to registering the &lt;code&gt;EventHandler&lt;/code&gt; programmatically, it is possible in Eclipse 4 to specify a method for method injection that is called on event handling by additionally providing support for injection.&lt;/p&gt;
&lt;p&gt;Such an event handler method looks similar to the following snippet:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Inject
@Optional
void handleConvinceEvent(
        @UIEventTopic(MafiaBossConstants.TOPIC_CONVINCE) String target) {
    e4HandlerLabel.setText(&quot;Received boss CONVINCE command for &quot; + target);
}&lt;/pre&gt;
&lt;p&gt;By using &lt;code&gt;@UIEventTopic&lt;/code&gt; you ensure that the code is executed in the UI thread. If you don’t care about the UI thread, you can use &lt;code&gt;@EventTopic&lt;/code&gt; instead. The handler that is registered in the back will also be automatically unregistered if the containing instance is destroyed.&lt;/p&gt;
&lt;p&gt;While the method gets directly invoked as event handler, the injection does not work without modifications on the event producer side. For this the data that should be used for injection needs to be added to the event properties for the key &lt;em&gt;&lt;strong&gt;org.eclipse.e4.data&lt;/strong&gt;&lt;/em&gt;. This key is specified as a constant in &lt;code&gt;IEventBroker&lt;/code&gt;. But using the constant would also introduce a dependency to &lt;em&gt;org.eclipse.e4.core.services&lt;/em&gt;, which is not always intended for event producer bundles. Therefore modifying the generation of the event properties map in &lt;code&gt;BossCommand&lt;/code&gt; will make the E4 event handling injection work:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;// create the event properties object
Map&amp;lt;String, Object&amp;gt; properties = new HashMap&amp;lt;&amp;gt;();
properties.put(MafiaBossConstants.PROPERTY_KEY_TARGET, target);
properties.put(&quot;org.eclipse.e4.data&quot;, target);
&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
The &lt;code&gt;EventBroker&lt;/code&gt; additionally adds the topic to the event properties for the key &lt;em&gt;&lt;strong&gt;event.topics&lt;/strong&gt;&lt;/em&gt;. In Oxygen it does not seem to be necessary anymore.&lt;/p&gt;
&lt;p&gt;The sources for this tutorial are hosted on GitHub in the already existing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-pde&quot; target=&quot;_blank&quot;&gt;DS Getting Started (PDE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-bndtools&quot; target=&quot;_blank&quot;&gt;DS Getting Started (Bndtools)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PDE version also includes a sample project &lt;em&gt;org.fipro.mafia.ui&lt;/em&gt; which is a very simple RCP application that shows the usage of the event handler in a view part.&lt;/p&gt;</description>
	<pubDate>Tue, 16 May 2017 06:49:03 +0000</pubDate>
</item>
<item>
	<title>Sebastian Zarnekow: Moving On - Part 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6255758224607466565.post-6920303218825772190</guid>
	<link>http://zarnekow.blogspot.com/2017/05/moving-on-part-2.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;A big thank you for all the nice feedback and encouraging words that I received after my announcement to leave SMACC. Now, that I’ve had my last day at the company, I think it’s time to raise the curtain. And there aren’t too many surprises behind it, I guess.&lt;br /&gt;From 01 June 2017 on, I’ll be a freelancer and professional consultant. I will build solutions for software developers and solve language engineering problems for my customers. My goal is to help developers and domain experts sharpening their tools, so that they can tackle their business challenges more efficiently.&lt;br /&gt;Also I will work closely with the great people and friends from &lt;a href=&quot;https://www.itemis.de/&quot; target=&quot;_blank&quot;&gt;itemis&lt;/a&gt; and be part of the growing team in the &lt;a href=&quot;https://www.google.de/maps/dir//Friedrichstra%C3%9Fe+68,+10117+Berlin/&quot; target=&quot;_blank&quot;&gt;Berlin branch&lt;/a&gt;. Of course I’m looking forward to contributing to &lt;a href=&quot;http://www.eclipse.org/Xtext/&quot; target=&quot;_blank&quot;&gt;Xtext&lt;/a&gt; again. After being absent for more than 15 months, a few things changed in the project, but there are plenty of interesting topics to tackle in the framework, for sure. Time to get my hands dirty!&lt;br /&gt;Long story short: I’m happy to be back :)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 15 May 2017 19:08:17 +0000</pubDate>
	<author>noreply@blogger.com (Sebastian Zarnekow)</author>
</item>
<item>
	<title>Christian Pontesegger: Extract eclipse svg images</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-6136395886583933220</guid>
	<link>http://codeandme.blogspot.com/2017/05/extract-eclipse-svg-icons.html</link>
	<description>When creating new icons for applications I like browsing &lt;a href=&quot;http://git.eclipse.org/c/platform/eclipse.platform.images.git/tree/org.eclipse.images/eclipse-svg&quot; target=&quot;_blank&quot;&gt;existing eclipse svg images&lt;/a&gt;. The repository structure is nice when you know what to look for. But with all its subfolders it is not suited for interactive browsing.&lt;br /&gt;&lt;br /&gt;While I am not worlds greatest bash script kiddie, I assembled a script that clones the repo and sorts its svg images. after execution you end up with a folder eclipse_images that hosts the svg files.&lt;br /&gt;&lt;br /&gt;If you improve the script, please post it here so others can benefit.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;#!/bin/bash&lt;br /&gt;&lt;br /&gt;# create working dir&lt;br /&gt;mkdir eclipse_images&lt;br /&gt;cd eclipse_images/&lt;br /&gt;&lt;br /&gt;# get images&lt;br /&gt;git clone  git://git.eclipse.org/gitroot/platform/eclipse.platform.images.git&lt;br /&gt;&lt;br /&gt;# extract all svg images&lt;br /&gt;for line in `find eclipse.platform.images/ -iname &quot;*.svg&quot;`;&lt;br /&gt;do&lt;br /&gt;   echo line | awk -v source=&quot;$line&quot; '{str=source; gsub(/\//, &quot;_&quot;, str); gsub(/eclipse.platform.images_org.eclipse.images_eclipse-svg_/, &quot;&quot;, str); gsub(/icons_full_/, &quot;&quot;, str); gsub(/_icons_/, &quot;_&quot;, str); print &quot;mv \&quot;&quot; source &quot;\&quot; \&quot;&quot;  str &quot;\&quot;&quot;}' | bash -sx&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;# remove rest of repository&lt;br /&gt;rm -rf eclipse.platform.images&lt;br /&gt;&lt;br /&gt;# extract subtype 'wizard banner'&lt;br /&gt;mkdir &quot;wizban&quot;&lt;br /&gt;for line in `find . -maxdepth 1 -iname &quot;*_wizban_*.svg&quot;`;&lt;br /&gt;do&lt;br /&gt; mv &quot;$line&quot; &quot;wizban&quot;&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;# extract overlay images&lt;br /&gt;mkdir &quot;overlay&quot;&lt;br /&gt;for line in `find . -maxdepth 1 -regextype posix-extended -regex &quot;^.*_ovr(16_.*)?.*.svg&quot;`;&lt;br /&gt;do&lt;br /&gt; mv &quot;$line&quot; &quot;overlay&quot;&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;# extract progress indicators&lt;br /&gt;mkdir &quot;progress&quot;&lt;br /&gt;for line in `find . -maxdepth 1 -regextype posix-extended -regex &quot;^.*_(prgss|progress)_.*.svg&quot;`;&lt;br /&gt;do&lt;br /&gt; mv &quot;$line&quot; &quot;progress&quot;&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;# extract view images&lt;br /&gt;mkdir &quot;views&quot;&lt;br /&gt;for line in `find . -maxdepth 1 -regextype posix-extended -regex &quot;^.*_e?view(16)?_.*.svg&quot;`;&lt;br /&gt;do&lt;br /&gt; mv &quot;$line&quot; &quot;views&quot;&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;# ... and all the rest&lt;br /&gt;declare -a arr=(&quot;obj16&quot; &quot;elcl16&quot; &quot;clcl16&quot; &quot;etool16&quot; &quot;ctool16&quot; &quot;obj&quot;)&lt;br /&gt;mkdir &quot;images&quot;&lt;br /&gt;for token in &quot;${arr[@]}&quot;&lt;br /&gt;do&lt;br /&gt; for line in `find . -maxdepth 1 -iname &quot;*_${token}_*.svg&quot;`;&lt;br /&gt; do&lt;br /&gt;  mv &quot;$line&quot; &quot;images&quot;&lt;br /&gt; done&lt;br /&gt;done&lt;br /&gt;&lt;br /&gt;cd ..&lt;br /&gt;&lt;/pre&gt;</description>
	<pubDate>Mon, 15 May 2017 17:44:22 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Wayne Beaton: Devoxx4Kids Ottawa June 2017</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4817</guid>
	<link>https://waynebeaton.wordpress.com/2017/05/14/devoxx4kids-ottawa-june-2017/</link>
	<description>&lt;p&gt;We all had such a great time at the &lt;a href=&quot;http://www.devoxx4kids.org/&quot;&gt;Devoxx4Kids&lt;/a&gt; session in San Jose this past March that we’ve decided to try running a session here in Ottawa.&lt;/p&gt;
&lt;p&gt;The goals and mission of Devoxx4Kids is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Teach children Computer Programming while having fun and introduce them to concepts of robotics, electronics and generally being creative with these kind of devices.&lt;/li&gt;
&lt;li&gt;Inspire not only children but also the classical education system, so they too can start including computer science in their curriculum.&lt;/li&gt;
&lt;li&gt;Demystify programming for girls and introduce them to computer science in order to improve gender equality in that field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full &lt;a href=&quot;http://www.devoxx4kids.org/manifesto/&quot;&gt;manifesto&lt;/a&gt; is on the Devoxx4Kids website. There’s also all sorts of information about the programme, including links to the workshops.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;20170319_130428&quot; class=&quot;alignnone size-full wp-image-4855&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/05/20170319_130428.jpg?w=640&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;em&gt;Don’t let this picture fool you. Plenty of young women attended the session in San Jose, but we were so caught up in the fun that we didn’t take all that many pictures…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For this first attempt, we’re going to keep it simple and run only two workshops (they ran eight in four parallel streams in San Jose). Since we’re new at this, we’re going to stick to coding workshops with a plan to branch out and maybe try some of the hardware workshops in a future session (these workshops require that we acquire some supplies and equipment that we don’t have readily at hand).&lt;/p&gt;
&lt;p&gt;For this first run, the good people at Carleton University have offered up some space. Registration will open at &lt;strong&gt;9:00 am on Saturday, June 3, 2017&lt;/strong&gt;; we’ll be in room 5345 of the Herzberg Physics building.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;5345 Herzberg Physics&lt;br /&gt;
Carleton University&lt;br /&gt;
1125 Colonel By Dr&lt;br /&gt;
Ottawa, ON K1S 5B6&lt;/p&gt;
&lt;p&gt;The target age range for attendees is between ten and fourteen years of age (close counts). We’ll post more information, including how to register, on our &lt;a href=&quot;https://www.meetup.com/Devoxx4Kids-Ottawa/&quot;&gt;event page&lt;/a&gt;. Registration includes lunch. We’re charging a modest fee of $30 to cover our expenses. Attendees will need to bring their own laptop computer to complete the exercises (we may be able to bring a few spares).&lt;/p&gt;
&lt;p&gt;If you’re interested in helping to mentor the session, please send us a note at emo@eclipse.org. We’ll get the mentors together in late May to go through the exercises and make sure that everybody is ready to hit the ground running.&lt;/p&gt;
&lt;p&gt;The first workshop will focus on a simple game written in &lt;em&gt;Javascript and HTML&lt;/em&gt; using a game engine called &lt;em&gt;Phaser&lt;/em&gt;. Participants are shown some basic JavaScript expressions and are then invited to use their new knowledge to modify the game. The beautiful thing about this exercise is that it requires virtually no set-up: the code is all self-contained, any text editor (including Notepad) can be used for modifications, and it all runs in a browser. Further, it can be run successfully without requiring an Internet connection.&lt;/p&gt;
&lt;p&gt;The second workshop is concerned with &lt;em&gt;Minecraft Modding&lt;/em&gt; using &lt;em&gt;Forge for Minecraft&lt;/em&gt; and Eclipse IDE as the development environment. This workshop has a few more moving parts than the first and so will require a bit more effort to set up and most certainly does require a stable Internet connection to at least assemble the initial development environment via a Gradle build. There’s certainly a lot of opportunities in this workshop to explain all sorts of interesting concepts without getting bogged down in too many details (which will be good if we end up having attendees with prior experience).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screenshot from 2017-05-12 15-36-17&quot; class=&quot;alignnone size-full wp-image-4840&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/05/screenshot-from-2017-05-12-15-36-17.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll send out setup instructions a week or so ahead of the session; we can hit the ground running faster if everybody has the software that we’re going to need already downloaded.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot; aligncenter&quot; src=&quot;https://i0.wp.com/www.devoxx4kids.org/wp-content/uploads/2013/10/DevoxxWithoutBrackets_PNG_600px.png&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4817/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4817/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4817&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 15 May 2017 02:56:45 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio Maintenance Release for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/10.4.0.ga-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.Final.html&quot;&gt;JBoss Tools 4.4.4&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/neon/10.4.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 10.4&lt;/a&gt; for Eclipse Neon.3 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio10&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio10.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://www.jboss.org/products/devstudio.html&quot;&gt;JBoss Products page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar jboss-devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.6.3 (Neon.3) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon3&quot;&gt;Eclipse 4.6.3 Neon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/neon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was improvements for container based development and bug fixing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;improved-openshift-3-and-docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-openshift-3-and-docker-tools&quot;&gt;&lt;/a&gt;Improved OpenShift 3 and Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We continue to work on providing better experience for container based development in JBoss Tools and Developer Studio. Let’s go through a few interesting updates here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;/a&gt;OpenShift Server Adapter enhanced flexibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift server adapter is a great tool that allows developers to synchronize local changes in the Eclipse workspace with running pods in the
      OpenShift cluster. It also allows you to remote debug those pods when the server adapter is launched in Debug mode.
      The supported stacks are Java and NodeJS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As pods are ephemeral OpenShift resources, the server adapter definition was based on an OpenShift service resource and the pods are then
      dynamically computed from the service selector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This has a major drawback as it allows to use this feature only for pods that are part of a service, which may be logical for Web based applications
      as a route (and thus a service) is required in order to access the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, it is now possible to create a server adapter from the following OpenShift resources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service (as before)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pod&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If a server adapter is created from a pod, it will be created from the associated OpenShift resource, in the preferred order:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As the OpenShift explorer used to display OpenShift resources that were linked to a service, it has been enhanced as well.
      It now displays resources linked to a deployment config or replication controller.
      Here is an example of a deployment with no service ie a deployment config:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, as an OpenShift server adapter can be created from different kind of resources, the kind of associated resource is displayed when
      creating the OpenShift server adapter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once created, the kind of OpenShift resource adapter is also displayed in the Servers view:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This information is also available from the server editor:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#security-vulnerability-fixed-in-certificate-validation-database&quot;&gt;&lt;/a&gt;Security vulnerability fixed in certificate validation database&lt;/h4&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you use the OpenShift tooling to connect to an OpenShift API server, the certificate of the OpenShift API server
      is first validated. If the issuer authority is a known one, then the connection is then established. If the issuer is an
      unknown one, a validation dialog is first shown to the user with the details of the OpenShift API server certificate as well
      as the details of the issuer authority. If the user accepts it, then the connection is established. There is also an option to
      store the certificate in a database so that next time a connection is attempted to the same OpenShift API server, then the certificate
      will be considered valid an no validation dialog will be show again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;certificate validation dialog&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/certificate-validation-dialog.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We found a security vulnerabilty as the certificate was wrongly stored: it was partially stored (not all attributes were stored) so we may
      interpret a different certificate as validated where it should not.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We had to change the format of the certificate database. As the certificates stored in the previous database were not entirelly stored, there was
      no way to provide a migration path. As a result, after the upgrade, the certificate database will be empty. So if you had previously accepted some
      certificates, then you need to accept them again and fill the certificate database again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;cdk-3-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#cdk-3-server-adapter&quot;&gt;&lt;/a&gt;CDK 3 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The CDK 3 server adapter has been here for quite a long time. It used to be Tech Preview as CDK 3 was not officially released. It is now officiallly available.
      While the server adapter itself has limited functionality, it is able to start and stop the CDK virtual machine via its minishift binary.
      Simply hit Ctrl+3 (Cmd+3 on OSX) and type CDK, that will bring up a command to setup and/or launch the CDK server adapter.
      You should see the old CDK 2 server adapter along with the new CDK 3 one (labeled &lt;strong&gt;Red Hat Container Development Kit 3&lt;/strong&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter5&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter5.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All you have to do is set the credentials for your Red Hat account and the location of the CDK’s minishift binary file and the type of virtualization hypervisor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you’re finished, a new CDK Server adapter will then be created and visible in the Servers view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the server is started, Docker and OpenShift connections should appear in their respective views, allowing the user to quickly create a new Openshift application and begin developing their AwesomeApp in a highly-replicatable environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter4&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter4.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-3-5-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-container-platform-3-5-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 3.5 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift Container Platform (OCP) 3.5 has been
      &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-brings-kubernetes-new-application-workloads-latest-version-red-hat-openshift-container-platform&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; by Red Hat.
      JBossTools 4.4.4.Final has been validated against OCP 3.5.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-extensibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-extensibility&quot;&gt;&lt;/a&gt;OpenShift server adapter extensibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server adapter had long support for EAP/Wildfly and NodeJS based deployments. It turns out that it does a great deal of synchronizing
      local workspace changes to remote deployments on OpenShift which have been standardized through images metadata (labels). But each runtime has its
      own specific. As an example, Wildfly/EAP deployments requires that a re-deploy trigger is sent after the files have been synchronized.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to reduce the technical debt and allow support for other runtimes (lots of them in the microservice world), we have refactored the OpenShift
      server adapter so that each runtime specific is now isolated and that it will be easy and safe to add support for new runtime.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a full in-depth description, see the following &lt;a href=&quot;https://github.com/jbosstools/jbosstools-openshift/wiki/Openshift-server-adapter-profile-and-its-subsystems&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;pipeline-builds-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#pipeline-builds-support&quot;&gt;&lt;/a&gt;Pipeline builds support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pipeline based builds are now supported by the OpenShift tooling.
      When creating an application, if using a template, if one of the builds is based on pipeline, you can view the detail
      of the pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-wizard.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When your application is deployed, you can see the details of the build configuration for the pipeline based builds:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline details&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-details.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More to come as we are improving the pipeline support in the OpenShift tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;update-of-docker-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#update-of-docker-client&quot;&gt;&lt;/a&gt;Update of Docker Client&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The level of the underlying com.spotify.docker.client plug-in used to access the Docker daemon has been upgraded to 3.6.8.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;run-image-network-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-image-network-support&quot;&gt;&lt;/a&gt;Run Image Network Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new page has been added to the Docker Run Image Wizard and Docker Run Image Launch configuration that allows
      the end-user to specify the network mode to use.  A user can choose from Default, Bridge, Host, None, Container,
      or Other.  If Container is selected, the user must choose from an active Container to use the same network mode.
      If Other is specified, a named network can be specified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRunConfigNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;refresh-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#refresh-connection&quot;&gt;&lt;/a&gt;Refresh Connection&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users can now refresh the entire connection from the Docker Explorer View.  Refresh can be performed two ways:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;using the right-click context menu from the Connection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using the Refresh menu button when the Connection is selected&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Refresh Connection&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRefreshConnection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;/a&gt;API Change in JMX UI’s New Connection Wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While hardly something most users will care about, extenders may need to be aware that the API for adding connection types to the &amp;amp;aposNew JMX Connection&amp;amp;apos wizard in the &amp;amp;aposJMX Navigator&amp;amp;apos has changed.  Specifically, the &amp;amp;aposorg.jboss.tools.jmx.ui.providerUI&amp;amp;apos extension point has been changed. While previously having a child element called &amp;amp;aposwizardPage&amp;amp;apos, it now requires a &amp;amp;aposwizardFragment&amp;amp;apos.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A &amp;amp;aposwizardFragment&amp;amp;apos is part of the &amp;amp;aposTaskWizard&amp;amp;apos framework first used in WTP’s ServerTools, which has, for a many years, been used throughout JBossTools. This framework allows wizard workflows where the set of pages to be displayed can change based on what selections are made on previous pages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change was made as a direct result of a bug caused by the addition of the Jolokia connection type in which some standard workflows could no longer be completed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change only affects adopters and extenders, and should have no noticable change for the user, other than that the below bug has been fixed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;hibernate-runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;hibernate-runtime-provider-updates-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates-2&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.0 runtime provider now incorporates Hibernate Core version 5.0.12.Final and Hibernate Tools version 5.0.5.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.1 runtime provider now incorporates Hibernate Core version 5.1.4.Final and Hibernate Tools version 5.1.3.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.2 runtime provider now incorporates Hibernate Core version 5.2.8.Final and Hibernate Tools version 5.2.2.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-6-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.6.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.6.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.6.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;startup&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/forge/images/4.4.4.AM3/startup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.4.4 and Developer Studio 10.4 out we are already working on the next release for Eclipse Oxygen.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 12 May 2017 14:16:37 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Xtext LSP vs. Xtext Web</title>
	<guid isPermaLink="false">http://typefox.io/?p=14192</guid>
	<link>http://typefox.io/xtext-lsp-vs-xtext-web</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;a href=&quot;http://xtext.org&quot;&gt;Eclipse Xtext&lt;/a&gt; language development framework can be used to implement domain-specific languages (DSLs) as well as fully blown programming languages. In addition to a modern compiler architecture, it comes with tool support for different platforms, like Eclipse, IntelliJ and Web. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since supporting all these different editor platforms is a lot of effort, we are strong supporters of the &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol&quot;&gt;Language Server Protocol (LSP)&lt;/a&gt;. The LSP defines a set of requests and notifications for editors to interact with language servers. A language server essentially is a smart compiler watching a workspace and exposing services for an editor. Such services cover things like content assist, find references, rename refactoring and so on. So the big question is :&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When should I use Xtext LSP instead of a native editor integration?&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As of today if you are looking for an Eclipse Plug-in my answer is clearly, go with the traditional Xtext Eclipse Plug-in. With Eclipse LSP4E there is Eclipse support for language servers, but it is not even close to what our native Eclipse support does. I also doubt that this will change any time in the future. &lt;strong&gt;The native Eclipse integration of Xtext is here to stay.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For IntelliJ IDEA the situation is different. Neither the Xtext integration has been updated with the last release, nor has Jetbrains yet started to work on LSP support. The code for the IDEA integration is quite extensive and deep. So deep that we get regularly broken because we use non-public API. Since the demand for IDEA integration is not high, maintaining it doesn’t make sense to us. That is why I asked Jetbrains to work on LSP integration last year already. So far they don’t seem to be convinced, but you could add your 2cents or +1 to &lt;a href=&quot;https://youtrack.jetbrains.com/issue/IDEABKL-7409&quot;&gt;this ticket&lt;/a&gt; if you think LSP would be a good IDEA. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For the rest of this post, I want to talk about Xtext Web and why you should not use it anymore and prefer the LSP integration instead.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext Web support was our first attempt to generalize language features over multiple editors. At that time we only abstracted over the web editors Ace, CodeMirror and Eclipse Orion (the editor widget, not the IDE). We did it over a REST interface and focussed on single code editors, only. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The LSP integration works with any editor supporting it and while Eclipse Orion is still working on supporting it, the Monaco code editor from Microsoft &lt;a href=&quot;http://typefox.io/teaching-the-language-server-protocol-to-microsofts-monaco-editor&quot;&gt;fully supports it already&lt;/a&gt;. So here are my four reasons why you should use LSP for web applications:&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Monaco Is Awesome&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our team has been working with Monaco since it came out last summer. For instance, we are developing a data science IDE for &lt;a href=&quot;http://r-brain.io&quot;&gt;r-brain.io&lt;/a&gt; (you can try it for free :-)), where we use Monaco with language servers (currently Python and R). The R language server has been implemented in Xtext using the brand new LSP support. Please have a look at this &lt;a href=&quot;https://r-brain.io/en/blog/ride-a-new-data-science-ide-for-python-and-r/&quot;&gt;article&lt;/a&gt; to learn more about its features.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far working with Monaco has been a decent experience. The code is well written and organized, and the quality is very high. Microsoft uses &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, which we do, too, when working on a JavaScript stack. It is to JavaScript what our &lt;a href=&quot;https://www.eclipse.org/xtend/&quot;&gt;Xtend programming language&lt;/a&gt; is to Java :).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Feature-wise I can say that it has all the things other editors have, but also comes with additional nice features like &lt;a href=&quot;https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup&quot;&gt;code-lenses&lt;/a&gt;, &lt;a href=&quot;https://code.visualstudio.com/docs/editor/editingevolved&quot;&gt;peak definition or the integrated find references&lt;/a&gt;. Moreover, it is very extensible letting use inline any kind of html for instance.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Multiple Editor Support&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Monaco directly supports to work with multiple editors in a single website and connect them for e.g. navigation. This is also a big difference between Xtext LSP and Xtext Web. Xtext LSP is built on top of our incremental builder infrastructure, so it can naturally deal with multiple documents and even projects and dependencies. This doesn’t mean that you need to serve your files from a file system or need to deal with complicated project setups. It just supports this once you want to do it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext Web, on the other hand, can only handle a single document, and the underlying resource set needs to be provided programmatically.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Write Once, Run Everywhere&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Having a fully compliant language server for your Xtext DSL will allow to use it in other contexts, too. Single-sourcing your language implementation and being able to run it in all different LSP-supporting editors is a huge plus. You decouple the work that you put into your language from the decisions you make regarding in which editors or applications you integrate it.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Future Proof&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When it comes to integrating Xtext languages in web applications all our passion and love goes to the LSP. Our customers use either Eclipse or LSP, and we are happy helping people to migrate their existing Xtext Web solutions to LSP and Monaco. Going forward we won’t invest into the Xtext Web support but likely will deprecate it soon. In the future, given the adoption of the LSP, there will be even more tools and editors that can run your Xtext languages.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Final Words&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So for me, the main focus in Xtext will be the traditional Eclipse support and the LSP support for everything else. The Eclipse support will benefit from the LSP support as well since we plan to implement new tool features in a way such that it can be used from Eclipse as well as from LSP. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please &lt;a href=&quot;http://typefox.io/contact&quot;&gt;get in touch&lt;/a&gt; if you have questions or any doubts whether your use case is well covered by this focus.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 12 May 2017 10:03:59 +0000</pubDate>
</item>
<item>
	<title>VIATRA: Dimitris Kolovos at IncQuery Labs Academy</title>
	<guid isPermaLink="false">5614faafe4b03f677dc3822b:56153118e4b022593e35e24b:591486a020099e7b819b4fcb</guid>
	<link>https://viatra.net/news/2017/5/dimitris-kolovos-at-incquery-labs-academy</link>
	<description>&lt;p&gt;IncQuery Labs Academy – an IT engineering professional educational platform – founded by IncQuery Labs Ltd. in April 2016. It aims to present our specializations most interesting and challenging projects, results and experiences. The presentations go around diverse topics in software development, validation and verification, model driven engineering, open-source technologies, etc.&lt;/p&gt;&lt;p&gt;IncQuery Labs Academy continues with a special speaker: Dimitris Kolovos, Senior Lecturer (Associate Professor) at the Department of Computer Science of the University of York, where he researches and teaches automated and model-driven software engineering. He is also an active Eclipse Foundation committer, leading the development of the open-source Epsilon platform under the Eclipse Modelling project.&lt;/p&gt;&lt;p&gt;His talks title: Model-Based Engineering in Industry: An Academic Toolsmith's Perspective&lt;/p&gt;&lt;p&gt;Abstract:&lt;/p&gt;&lt;p&gt;In this talk he will reflect on lessons learnt through developing and evangelising Eclipse-based open-source technologies for Model-Based Engineering for more than a decade now. He will focus on different states of maturity and practice he has encountered in industry, on the external perception of Eclipse-based MBE technologies, and on opportunities and challenges involved in bridging heterogeneous open-source and proprietary MBE tools.&lt;/p&gt;&lt;p&gt;Join us online on the following link and leave your questions, comments in IncQuery Labs’ &lt;a href=&quot;https://www.facebook.com/incquerylabs/?fref=ts&quot; target=&quot;_blank&quot;&gt;Facebook page&lt;/a&gt;!&lt;/p&gt;</description>
	<pubDate>Thu, 11 May 2017 15:50:26 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Time scheduling with Chime</title>
	<guid isPermaLink="true">http://vertx.io/blog/time-scheduling-with-chime</guid>
	<link>http://vertx.io/blog/time-scheduling-with-chime</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;time-scheduling-&quot;&gt;Time scheduling.&lt;/h2&gt;
&lt;p&gt;Eclipse Vert.x executes periodic and delayed actions with
&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_executing_periodic_and_delayed_actions&quot;&gt;periodic and one-shot timers&lt;/a&gt;.
This is the base for time scheduling and reach feature extension must be rather interesting.
Be notified at certain date / time, take into account holidays,
repeat notifications until a given date, apply time zone,
take into account daylight saving time etc.
There are a lot of useful features time scheduler may introduce to the Vert.x stack.  &lt;/p&gt;
&lt;h2 id=&quot;chime-&quot;&gt;Chime.&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/LisiLisenok/Chime&quot;&gt;Chime&lt;/a&gt; is time scheduler verticle which works on &lt;em&gt;Vert.x&lt;/em&gt; event bus and provides:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheduling with &lt;em&gt;cron-style&lt;/em&gt;, &lt;em&gt;interval&lt;/em&gt; or &lt;em&gt;union&lt;/em&gt; timers:&lt;ul&gt;
&lt;li&gt;at a certain time of day (to the second);  &lt;/li&gt;
&lt;li&gt;on certain days of the week, month or year;  &lt;/li&gt;
&lt;li&gt;with a given time interval;  &lt;/li&gt;
&lt;li&gt;with nearly any combination of all of above;  &lt;/li&gt;
&lt;li&gt;repeating a given number of times;  &lt;/li&gt;
&lt;li&gt;repeating until a given time / date;  &lt;/li&gt;
&lt;li&gt;repeating infinitely  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proxying event bus with conventional interfaces  &lt;/li&gt;
&lt;li&gt;applying time zones available on &lt;em&gt;JVM&lt;/em&gt; with daylight saving time taken into account  &lt;/li&gt;
&lt;li&gt;flexible timers management system:  &lt;ul&gt;
&lt;li&gt;grouping timers;  &lt;/li&gt;
&lt;li&gt;defining a timer start or end times  &lt;/li&gt;
&lt;li&gt;pausing / resuming;  &lt;/li&gt;
&lt;li&gt;fire counting;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;listening and sending messages via event bus with &lt;em&gt;JSON&lt;/em&gt;;  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;publishing&lt;/em&gt; or &lt;em&gt;sending&lt;/em&gt; timer fire event to the address of your choice.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;&lt;em&gt;Chime&lt;/em&gt; is written in &lt;a href=&quot;https://ceylon-lang.org&quot;&gt;Ceylon&lt;/a&gt; and is available at
&lt;a href=&quot;https://herd.ceylon-lang.org/modules/herd.schedule.chime&quot;&gt;Ceylon Herd&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;running-&quot;&gt;Running.&lt;/h2&gt;
&lt;h3 id=&quot;ceylon-users-&quot;&gt;Ceylon users.&lt;/h3&gt;
&lt;p&gt;Deploy &lt;em&gt;Chime&lt;/em&gt; using &lt;code&gt;Verticle.deployVerticle&lt;/code&gt; method.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.vertx&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.ceylon&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.core&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;vertx&lt;/span&gt;}
&lt;span class=&quot;hljs-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;herd&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.schedule&lt;/span&gt;&lt;span class=&quot;hljs-class&quot;&gt;.chime&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;Chime&lt;/span&gt;}
&lt;span class=&quot;hljs-attribute&quot;&gt;Chime&lt;/span&gt;().&lt;span class=&quot;hljs-function&quot;&gt;deploy&lt;/span&gt;(vertx.&lt;span class=&quot;hljs-function&quot;&gt;vertx&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with &lt;code&gt;vertx.deployVerticle(\&quot;ceylon:herd.schedule.chime/0.2.1\&quot;);&lt;/code&gt;
but ensure that Ceylon verticle factory is available at class path.   &lt;/p&gt;
&lt;h3 id=&quot;java-users-&quot;&gt;Java users.&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ensure that Ceylon verticle factory is available at class path.  &lt;/li&gt;
&lt;li&gt;Put Ceylon versions to consistency. For instance, Vert.x 3.4.1 depends on Ceylon 1.3.0
while Chime 0.2.1 depends on Ceylon 1.3.2. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_deploying_verticles_programmatically&quot;&gt;Deploy verticle&lt;/a&gt;, like:  &lt;pre&gt;&lt;code&gt;vertx.&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;deployVerticle&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ceylon:herd.schedule.chime/0.2.1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;example with Maven is available at &lt;a href=&quot;https://github.com/LisiLisenok/ChimeJavaExample&quot;&gt;Github&lt;/a&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;schedulers-&quot;&gt;Schedulers.&lt;/h2&gt;
&lt;p&gt;Well, &lt;em&gt;Chime&lt;/em&gt; verticle is deployed. Let’s see its structure.&lt;br /&gt;In order to provide flexible and broad ways to manage timing two level architecture is adopted.
It consists of schedulers and timers. Timer is a unit which fires at a given time.
While scheduler is a set or group of timers and provides following:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creating and deleting timers;  &lt;/li&gt;
&lt;li&gt;pausing / resuming all timers working within the scheduler;  &lt;/li&gt;
&lt;li&gt;info on the running timers;  &lt;/li&gt;
&lt;li&gt;default time zone;  &lt;/li&gt;
&lt;li&gt;listening event bus at the given scheduler address for the requests to.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any timer operates within some scheduler. And one or several schedulers have to be created before starting scheduling.&lt;br /&gt;When &lt;em&gt;Chime&lt;/em&gt; verticle is deployed it starts listen event bus at &lt;strong&gt;chime&lt;/strong&gt; address (can be configured).
In order to create scheduler send to this address a JSON message.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;operation&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;scheduler name&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once scheduler is created it starts listen event bus at &lt;strong&gt;scheduler name&lt;/strong&gt; address.
Sending messages to &lt;strong&gt;chime&lt;/strong&gt; address or to &lt;strong&gt;scheduler name&lt;/strong&gt; address are rather equivalent,
excepting that chime address provides services for every scheduler, while scheduler address
provides services for this particular scheduler only.&lt;br /&gt;The request sent to the &lt;em&gt;Chime&lt;/em&gt; has to contain &lt;strong&gt;operation&lt;/strong&gt; and &lt;strong&gt;name&lt;/strong&gt; keys.
Name key provides scheduler or timer name. While operation key shows an action &lt;em&gt;Chime&lt;/em&gt; has to perform.
There are only four possible operations:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create - create new scheduler or timer;  &lt;/li&gt;
&lt;li&gt;delete - delete scheduler or timer;  &lt;/li&gt;
&lt;li&gt;info - request info on &lt;em&gt;Chime&lt;/em&gt; or on a particular scheduler or timer;  &lt;/li&gt;
&lt;li&gt;state - set or get scheduler or timer state (running, paused or completed).  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timers-&quot;&gt;Timers.&lt;/h2&gt;
&lt;p&gt;Now we have scheduler created and timers can be run within. There are two ways to access a given timer:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sending message to &lt;strong&gt;chime&lt;/strong&gt; address with ‘name’ field set to &lt;strong&gt;scheduler name:timer name&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Sending message to &lt;strong&gt;scheduler name&lt;/strong&gt; address with ‘name’ field set to either &lt;strong&gt;timer name&lt;/strong&gt; or &lt;strong&gt;scheduler name:timer name&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html#timer-request&quot;&gt;Timer request&lt;/a&gt; is rather complicated and contains a lot of details. In this blog post only basic features are considered:  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
    &quot;operation&quot;: &quot;create&quot;,
    &quot;name&quot;: &quot;scheduler name:timer name&quot;,
    &quot;description&quot;: {}
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is rather similar to request sent to create a scheduler.
The difference is only &lt;strong&gt;description&lt;/strong&gt; field is added.
This description is an JSON object which identifies particular timer type and its details.&lt;br /&gt;The other fields not shown here are optional and includes:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initial timer state (paused or running);  &lt;/li&gt;
&lt;li&gt;start or end date-time;  &lt;/li&gt;
&lt;li&gt;number of repeating times;  &lt;/li&gt;
&lt;li&gt;is timer message to be published or sent;  &lt;/li&gt;
&lt;li&gt;timer fire message and delivery options;  &lt;/li&gt;
&lt;li&gt;time zone.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timer-descriptions-&quot;&gt;Timer descriptions.&lt;/h2&gt;
&lt;p&gt;Currently, three types of timers are supported:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interval timer&lt;/strong&gt; which fires after each given time period (minimum 1 second):  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
  &quot;type&quot;: &quot;interval&quot;,
  &quot;delay&quot;: &quot;timer delay in seconds, Integer&quot;
};&lt;/code&gt;&lt;/pre&gt;  
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cron style timer&lt;/strong&gt; which is defined with cron-style:&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&lt;br /&gt;  “type”: “cron”,&lt;br /&gt;  “seconds”: “seconds in cron style, String”,&lt;br /&gt;  “minutes”: “minutes in cron style, String”,&lt;br /&gt;  “hours”: “hours in cron style, String”,&lt;br /&gt;  “days of month”: “days of month in cron style, String”,&lt;br /&gt;  “months”: “months in cron style, String”,&lt;br /&gt;  “days of week”: “days of week in cron style, String, optional”,&lt;br /&gt;  “years”: “years in cron style, String, optional”&lt;br /&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Cron timer is rather powerful and flexible. Investigate &lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html#cron-expression&quot;&gt;specification&lt;/a&gt; for the complete list of features.  &lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union timer&lt;/strong&gt; which combines a number of timers into a one:&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&lt;br /&gt;  “type”: “union”,&lt;br /&gt;  “timers”: [“list of the timer descriptions”]&lt;br /&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Union timer may be useful to fire at a list of specific dates / times.&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timer-events-&quot;&gt;Timer events.&lt;/h2&gt;
&lt;p&gt;Once timer is started it sends or publishes messages to &lt;strong&gt;scheduler name:timer name&lt;/strong&gt; address in JSON format.
Two types of events are sent:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fire event which occurs when time reaches next timer value:  &lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{  
  &quot;name&quot;: &quot;scheduler name:timer name, String&quot;,  
  &quot;event&quot;: &quot;fire&quot;,  
  &quot;count&quot;: &quot;total number of fire times, Integer&quot;,  
  &quot;time&quot;: &quot;ISO formated time / date, String&quot;,  
  &quot;seconds&quot;: &quot;number of seconds since last minute, Integer&quot;,  
  &quot;minutes&quot;: &quot;number of minutes since last hour, Integer&quot;,  
  &quot;hours&quot;: &quot;hour of day, Integer&quot;,  
  &quot;day of month&quot;: &quot;day of month, Integer&quot;,  
  &quot;month&quot;: &quot;month, Integer&quot;,  
  &quot;year&quot;: &quot;year, Integer&quot;,  
  &quot;time zone&quot;: &quot;time zone the timer works in, String&quot;
};&lt;/code&gt;&lt;/pre&gt;  &lt;/li&gt;
&lt;li&gt;complete event which occurs when timer is exhausted by some criteria given at timer create request:  &lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{  
  &quot;name&quot;: &quot;scheduler name:timer name, String&quot;,  
  &quot;event&quot;: &quot;complete&quot;,  
  &quot;count&quot;: &quot;total number of fire times, Integer&quot;  
};&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, now we know everything to be happy with &lt;em&gt;Chime&lt;/em&gt;: schedulers and requests to them, timers and timer events.
Will see some examples in the next section.  &lt;/p&gt;
&lt;h2 id=&quot;examples-&quot;&gt;Examples.&lt;/h2&gt;
&lt;h3 id=&quot;ceylon-example-&quot;&gt;Ceylon example.&lt;/h3&gt;
&lt;p&gt;Let’s consider a timer which has to fire every month at 16-30 last Sunday.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// listen the timer events&lt;/span&gt;
eventBus.consumer (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;,
    (Throwable|Message msg) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is Message msg) { print(msg.body()); }
        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { print(msg); }    
    }
);
&lt;span class=&quot;hljs-comment&quot;&gt;// create scheduler and timer&lt;/span&gt;
eventBus.send (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;chime&quot;&lt;/span&gt;,
    JsonObject {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;operation&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt; -&amp;gt; JsonObject {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;16&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SundayL&quot;&lt;/span&gt;
        }
    }
);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block info&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;‘*’ means any, ‘SundayL’ means last Sunday.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;If ‘create’ request is sent to Chime address with name set to ‘scheduler name:timer name’ and corresponding scheduler hasn’t been created before then Chime creates both new scheduler and new timer.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;java-example-&quot;&gt;Java example.&lt;/h3&gt;
&lt;p&gt;Let’s consider a timer which has to fire every Monday at 8-30 and every Friday at 17-30.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// listen the timer events&lt;/span&gt;
MessageConsumer consumer = eventBus.consumer(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;);
consumer.handler (
    message -&amp;gt; {
        System.out.&lt;span class=&quot;hljs-built_in&quot;&gt;println&lt;/span&gt;(message.body());
      }
);
&lt;span class=&quot;hljs-comment&quot;&gt;// description of timers&lt;/span&gt;
JsonObject mondayTimer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Monday&quot;&lt;/span&gt;);
JsonObject fridayTimer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cron&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;seconds&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;minutes&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hours&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;17&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of month&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;months&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;days of week&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-comment&quot;&gt;// union timer - combines mondayTimer and fridayTimer&lt;/span&gt;
JsonArray combination = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonArray()).&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(mondayTimer)
    .&lt;span class=&quot;hljs-built_in&quot;&gt;add&lt;/span&gt;(fridayTimer);
JsonObject timer = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;union&quot;&lt;/span&gt;)
    .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timers&quot;&lt;/span&gt;, combination);
&lt;span class=&quot;hljs-comment&quot;&gt;// create scheduler and timer&lt;/span&gt;
eventBus.send (
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;chime&quot;&lt;/span&gt;,
    (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()).put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;operation&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;)
        .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my scheduler:my timer&quot;&lt;/span&gt;)
        .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;description&quot;&lt;/span&gt;, timer)
);&lt;/code&gt;&lt;/pre&gt;  

&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block important&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-exclamation-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;Ensure that Ceylon verticle factory with right version is available at class path.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;at-the-end-&quot;&gt;At the end.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;herd.schedule.chime&lt;/code&gt; module provides some features not mentioned here:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;convenient builders useful to fill in JSON description of various timers;  &lt;/li&gt;
&lt;li&gt;proxying event bus with conventional interfaces;  &lt;/li&gt;
&lt;li&gt;reading JSON timer event into an object;  &lt;/li&gt;
&lt;li&gt;attaching JSON message to the timer fire event;  &lt;/li&gt;
&lt;li&gt;managing time zones.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also some ideas for the future:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom or user-defined timers;  &lt;/li&gt;
&lt;li&gt;limiting the timer fire time / date with calendar;  &lt;/li&gt;
&lt;li&gt;extracting timer fire message from external source.  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This is very quick introduction to the &lt;em&gt;Chime&lt;/em&gt; and if you are interested in you may read
more in &lt;a href=&quot;https://modules.ceylon-lang.org/repo/1/herd/schedule/chime/0.2.1/module-doc/api/index.html&quot;&gt;Chime documentation&lt;/a&gt; or even &lt;a href=&quot;https://github.com/LisiLisenok/Chime&quot;&gt;contribute&lt;/a&gt; to.  &lt;/p&gt;
&lt;p&gt;Thank’s for the reading and enjoy with coding!  &lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus for Real Time Beta</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=661</guid>
	<link>https://papyrusuml.wordpress.com/2017/05/08/papyrus-for-real-time-beta/</link>
	<description>&lt;p&gt;My minions have finally decided how the beta for Me-RT v1.0 will be conducted.&lt;/p&gt;
&lt;p&gt;As I am an open source endeavor, we have limited resources – so let’s use the ones we have!&lt;/p&gt;
&lt;p&gt;Do you have questions? Please use the &lt;a href=&quot;https://www.eclipse.org/forums/index.php?t=thread&amp;amp;SQ=db2e5a547933df0ab6e3b3931567260f&amp;amp;frm_id=314&amp;amp;frm_goto=Go&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Papyrus-RT Forum&lt;/a&gt;, using “&lt;strong&gt;#Beta&lt;/strong&gt;” to identify beta-related questions.&lt;/p&gt;
&lt;p&gt;Do you have a short question that can be answered in 140 characters? We’ll monitor &lt;a href=&quot;https://twitter.com/PapyrusUML&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt; (&lt;span class=&quot;DashboardProfileCard-screenname u-inlineBlock u-dir&quot; dir=&quot;ltr&quot;&gt;&lt;a class=&quot;DashboardProfileCard-screennameLink u-linkComplex u-linkClean js-nav&quot; href=&quot;https://twitter.com/PapyrusUML&quot;&gt;&lt;span class=&quot;username u-dir&quot; dir=&quot;ltr&quot;&gt;@&lt;b class=&quot;u-linkComplex-target&quot;&gt;PapyrusUML&lt;/b&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;) for the #beta tag.&lt;/p&gt;
&lt;p&gt;Do you want to tell us how much you love me? &lt;a href=&quot;https://papyrusuml.wordpress.com/contact-us/&quot;&gt;Contact Us&lt;/a&gt;!&lt;br /&gt;
But be warned that we will only answer questions in the forum or on Twitter!&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/661/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/661/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=661&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 08 May 2017 14:04:16 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: Getting Started With Gerrit on Eclipse CDT</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1914</guid>
	<link>https://kichwacoders.com/2017/05/03/getting-started-with-gerrit-on-eclipse-cdt/</link>
	<description>&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This is a guest post from Yannick Mayeur, a computer science student at &lt;a href=&quot;http://www.iut-blagnac.fr/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IUT Blagnac&lt;/a&gt; who is currently doing open-source work experience with &lt;a href=&quot;https://kichwacoders.com/about/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Kichwa Coders&lt;/a&gt;. It was originally one of his weekly write-ups which can be found &lt;a href=&quot;https://github.com/yannick-mayeur/BlogPosts&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You are probaly familiar with the pull request system of &lt;strong&gt;GitHub&lt;/strong&gt; that programmers use to contribute to an open-source project. &lt;strong&gt;Gerrit&lt;/strong&gt; (named after its designer Gerrit Rietveld) is basically an improved version of this system. Gerrit allows the committer to give more precise feedback on each line of code edited, and allows other members of the team to review those changes. Gerrit is used by the &lt;a href=&quot;https://www.eclipse.org/cdt/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse CDT&lt;/a&gt; community. In this blog post I will show you how to efficiently get started with it.&lt;/p&gt;
&lt;h2&gt;The required tools &amp;amp; knowledge&lt;/h2&gt;
&lt;p&gt;Having Git is basically all you need to clone the sources, and push them. If you want to edit them in a good environment use the &lt;a href=&quot;https://eclipse.org/downloads/packages/release/Neon/3&quot;&gt;Eclipse JAVA IDE&lt;/a&gt;. Knowing the basics of Git is also required, though I think you could pick up Git as you go along with a bit of trial and error.&lt;/p&gt;
&lt;h2&gt;How to get the sources of CDT&lt;/h2&gt;
&lt;p&gt;Cloning the sources to your computer is an easy but essential task.&lt;/p&gt;
&lt;p&gt;The link of the repository is: git://git.eclipse.org/gitroot/cdt/org.eclipse.cdt&lt;/p&gt;
&lt;p&gt;To clone use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git://git.eclipse.org/gitroot/cdt/org.eclipse.cdt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have the files, go to &lt;a href=&quot;https://bugs.eclipse.org/bugs/&quot;&gt;Bugzilla&lt;/a&gt; and find a bug you want to fix.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#pushing-the-changes-to-gerrit&quot; id=&quot;user-content-pushing-the-changes-to-gerrit&quot;&gt;&lt;/a&gt;Pushing the changes to Gerrit&lt;/h2&gt;
&lt;p&gt;Now comes the tricky part. In order for you to be able to push your change a few things have to be respected.&lt;span id=&quot;more-1914&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can only make one commit per change&lt;/li&gt;
&lt;li&gt;You have to sign off your commit using: &lt;code&gt;git commit -s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You must sign the &lt;a href=&quot;https://www.eclipse.org/legal/ECA.php&quot;&gt;ECA&lt;/a&gt; with the same email adress you use for Git&lt;/li&gt;
&lt;li&gt;Your commit must have a Change-ID. In order for your commit to automatically add a Change-ID you can install a hook. To install a hook go into the root directory of the project and execute the following command:&lt;br /&gt;
&lt;code&gt;curl -Lo.git/hooks/commit-msg &lt;a href=&quot;http://review.example.com/tools/hooks/commit-msg&quot; rel=&quot;nofollow&quot;&gt;http://review.example.com/tools/hooks/commit-msg&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the Gerrit remote, by using one of the following links: &lt;a href=&quot;http://git.eclipse.org:29418/cdt/org.eclipse.cdt.git&quot;&gt;http://git.eclipse.org:29418/cdt/org.eclipse.cdt.git&lt;/a&gt; or ssh://commiterId@git.eclipse.org:29418/cdt/org.eclipse.cdt.git if you are using SSH. Add the remote with the following command: &lt;code&gt;git remote add linkOfRepo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When all this is done you can push them with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push gerrit HEAD:refs/for/master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An Eclipse commiter will go through your changes and review them. You will be notified by email once this review is done. If the change is accepted, well done! If not, you will have to make any requested changes before pushing again but you will need to keep the exact same Change-ID.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#collaborative-work&quot; id=&quot;user-content-collaborative-work&quot;&gt;&lt;/a&gt;Collaborative work&lt;/h2&gt;
&lt;p&gt;Working in collaboration with someone on Git ain’t the easiest thing! So here are some tips and tricks I would have liked to know before I got started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are working with someone on the same Gerrit change, you can add this to your commit message, so both of you get credit:&lt;br /&gt;
&lt;code&gt;also-by name &amp;lt;email&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To get what your collaborator has pushed to Gerrit whilst also retaining your changes you can use Cherry Pick.
&lt;p&gt;&lt;a href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/ressource/w4-1.png&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;cherry-pick&quot; src=&quot;https://github.com/yannick-mayeur/BlogPosts/raw/master/ressource/w4-1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It may happen that conflicts arise – you can manually merge the confilicted files and continue the Cherry Pick with:&lt;br /&gt;
&lt;code&gt;git cherry-pick --continue&lt;/code&gt;.&lt;br /&gt;
Merge yours and your colleague’s commit by squashing the commits with: &lt;code&gt;git rebase -i HEAD~2&lt;/code&gt; and changing &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;squash&lt;/code&gt; on the second commit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;When you are working on an open-source project within an active community such as Eclipse CDT, commits happen quite frequently. If you want your change to be on the lastest version of the project you may have to rebase it. Here’s how to do it:
&lt;ul&gt;
&lt;li&gt;Checkout master&lt;/li&gt;
&lt;li&gt;Pull the changes&lt;/li&gt;
&lt;li&gt;Get back to your branch and do: &lt;code&gt;git rebase master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/yannick-mayeur/BlogPosts/blob/master/weekFour.md#conclusion&quot; id=&quot;user-content-conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Gerrit is an improved pull-request system but the improvement comes with a harder “getting-started” phase. You indeed have to work a bit harder to push your first change to Gerrit, install a hook, understand how to work with a collaborator, etc. But in the end the positive aspects outweigh the negative: the very useful chain of feedback, and the fact that you don’t have to fork the project make it better for big projects like CDT. Good Luck!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1914/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1914/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1914&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 03 May 2017 11:46:16 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Observing Papyrus-RT</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=639</guid>
	<link>https://papyrusuml.wordpress.com/2017/05/01/observing-papyrus-rt/</link>
	<description>&lt;p&gt;My minions from Queen’s University are keeping busing with ME-RT!&lt;/p&gt;
&lt;p&gt;They will be presenting a &lt;a href=&quot;https://papyrusuml.wordpress.com/2017/02/08/papyrus-rt-in-argentina/&quot;&gt;paper in Argentina&lt;/a&gt; and now they have created an easy way to observe what goes on in a Papyrus for Real Time generated executable!&lt;/p&gt;
&lt;p&gt;As a quick reminder, &lt;a href=&quot;https://www.eclipse.org/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt; is a version of me that enables modeling complex embedded systems with full code generation!&lt;/p&gt;
&lt;p&gt;To show you what they have done, my minions created a &lt;a href=&quot;https://youtu.be/EbMIgEX9O58&quot;&gt;YouTube Video&lt;/a&gt; of the result of their work.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/academia/&quot;&gt;academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/embedded/&quot;&gt;embedded&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/modeling/&quot;&gt;modeling&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/research/&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/639/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=639&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 01 May 2017 11:00:22 +0000</pubDate>
</item>
<item>
	<title>Geniutec: CodeFully for Full-stack Development — the Chocolate Aisle of Your Dreams!</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=513801</guid>
	<link>https://www.genuitec.com/codefully/</link>
	<description>&lt;p&gt;Have you ever walked into a candy store and secretly wished that the whole thing belonged to you?  Probably many of us did when we were kids.  But in reality you were a chocolate lover, so all you really wanted was that enormous chocolate aisle that had everything to make your heart content — from […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/codefully/&quot; rel=&quot;nofollow&quot;&gt;CodeFully for Full-stack Development — the Chocolate Aisle of Your Dreams!&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 28 Apr 2017 20:06:05 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: IoT developer survey : my 2 cents one year later …</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=4639</guid>
	<link>https://paolopatierno.wordpress.com/2017/04/28/iot-developer-survey-my-2-cents-one-year-later/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;As last year, I have decided to write a blog post about my point of view on the &lt;strong&gt;IoT developer survey&lt;/strong&gt; from the &lt;a href=&quot;http://iot.eclipse.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt; (IoT Working Group) with &lt;a href=&quot;http://iot.ieee.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IEEE&lt;/a&gt;, &lt;a href=&quot;http://agile-iot.eu/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Agile IoT&lt;/a&gt; and the &lt;a href=&quot;http://www.theinternetofthings.eu/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IoT Council&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;From my point of view, the final report gives always interesting insights on where the IoT business is going and about that, &lt;a href=&quot;https://twitter.com/IanSkerrett&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Ian Skerrett&lt;/a&gt; (Vice President of Marketing at Eclipse Foundation) has already analyzed the results, available &lt;a href=&quot;https://www.slideshare.net/IanSkerrett/iot-developer-survey-2017&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, writing a great &lt;a href=&quot;https://ianskerrett.wordpress.com/2017/04/19/iot-developer-trends-2017-edition/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I want just to add 2 more cents on that …&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Industry adoption …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It’s clear that industries are adopting IoT and there is a big increment for industrial automation, smart cities, energy management, building automation, transportation, healthcare and so on. IoT is becoming “real” even if, as we will see in the next paragraphs, it seems that we are &lt;strong&gt;still in a prototyping stage&lt;/strong&gt;. A lot of companies are investing on that but few of them have real solutions running in the field. Finally, from my point of view, it could be great to add more information about countries because I think that there is a big difference on how and where every country is investing for IoT.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;The concerns …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Security is always the big concern&lt;/strong&gt; but, as Ian said, interoperability and connectivity are on a downward trend; I agree with him saying that all the available middleware solutions and the IoT connectivity platforms are solving these problems. The great news is that all of them &lt;strong&gt;support different open and standard protocols&lt;/strong&gt; (MQTT, AMQP but even HTTP) that is the way to go for having &lt;strong&gt;interoperability&lt;/strong&gt;; at same time we are able to connect a lot of different devices, supporting different protocols, so the &lt;strong&gt;connectivity&lt;/strong&gt; problem is addressed as well.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Coming back to security, the survey shows that much more software developers are involved on building IoT solutions even because all the stuff they mostly use are SSL/TLS and data encryption so at software level. From my point of view, some security concerns should be addressed at hardware level (using crypto-chip, TPM and so on) but this is an area where software developers have a lack of knowledge. It’s not a surprise because we know that IoT needs a lot of different knowledge from different people but the survey shows that in some cases not the “right” people are involved on developing IoT solution. Too much web and mobile developers are working on that, too few embedded developer with a real hardware knowledge.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Languages : finally a distinction !&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Last year, in my 2 cents, I asked for having a distinction on which side of an IoT solution we consider the most used programming languages. I’m happy to know that Eclipse Foundation got this suggestion so this year survey asked about languages used on constrained devices, gateway and cloud.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;iot_survey&quot; class=&quot;alignnone size-full wp-image-4737&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/04/iot_survey.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The results don’t surprise me : &lt;strong&gt;C is the most used language on “real” low constrained devices&lt;/strong&gt; and all the other languages from Java to Python are mostly used on gateways; JavaScript fits in the cloud mainly with NodeJS. In any case, NodeJS is not a language so my idea is that providing only JavaScript as possible answer was enough even because other than using a server-side framework like NodeJS the other possibility is using JavaScript in “function as a service” platforms (i.e. Lambda from AWS, Azure Functions and so on) that are mostly based on NodeJS. Of course, &lt;strong&gt;the most used language in the cloud is Java&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;What about OS ?&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Linux is the most used OS&lt;/strong&gt; for both constrained devices and IoT gateways but … here a strange thing comes in my mind. On “real” constrained devices that are based on MCUs (i.e. Cortex-Mx) you can run few specific Linux distros (i.e. uCLinux) and not a full Linux distro so it’s strange that Linux wins on constrained devices but then when the survey shows what distros are used, uCLinux has a very low percentage. My guess is that a lot of software developers don’t know what a constrained device is &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;On constrained devices I expect that developers uses “no OS” (programming on bare metal) or a really tiny RTOS but not something closed to Linux.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;On gateways I totally agree with Linux but Windows is growing from last year.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Regarding the most used distros, the Raspbian victory shows that we are still in a prototyping stage. I can’t believe that developers are using Raspbian so the related Raspberry Pi hardware in production ! If it’s true … I’m scared about that ! If you know what are the planes, trains, building automation systems which are using something like that, please tell me … I have to avoid them &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Regarding the protocols …&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;From my point of view, the presence of TCP/IP in the connectivity protocols results is misleading. TCP/IP is a protocol used on top of Ethernet and Wi-Fi that are in the same results and we can’t compare them.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Regarding communication protocols, the current know-how is still leading; this is the reason why HTTP 1.1 is still on the top and HTTP 2.0 is growing. MQTT is there followed by CoAP, which is surprising me considering the necessity to have an HTTP proxy for exporting local traffic outside of a local devices network. AMQP is finding its own way and I think that in the medium/long term it will become a big player on that.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Cloud services&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this area we should have a distinction because the question is pretty general but we know that you can use Amazon AWS or Microsoft Azure for IoT in two ways :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;as IaaS hosting your own solution or an open source one for IoT (i.e. just using provided virtual machines for running an IoT software stack)&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;as PaaS using the managed IoT platforms (i.e. AWS IoT, Azure IoT Hub, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Having Amazon AWS on the top doesn’t surprise me but we could have more details on how it is used by the IoT developers.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The IoT business is growing and its adoption as well but looking at these survey results, most of the companies are still in a prototyping stage and few of them have a real IoT solution in the field.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It means that there is a lot of space for all to be invited to the party ! &lt;img alt=&quot;😀&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/4639/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/4639/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=4639&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 28 Apr 2017 06:59:58 +0000</pubDate>
</item>
<item>
	<title>Orion: Orion Moved to Github</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=887</guid>
	<link>http://planetorion.org/news/2017/04/orion-moved-to-github/</link>
	<description>&lt;p&gt;You may have heard a couple of weeks back that &lt;a href=&quot;https://dev.eclipse.org/mhonarc/lists/orion-dev/msg04073.html&quot;&gt;Orion moved to Github&lt;/a&gt;. If not, then let this be the notice that Orion moved to Github!&lt;/p&gt;
&lt;p&gt;We are very excited about the move. The webmasters (Derek Toolan in particular) did an amazing job in making the transition seamless and simple.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;You are probably wondering to yourself: “why did you move, you had a great home at eclipse.org?”. The answer boils down to &lt;em&gt;simpler contributing&lt;/em&gt;. With Github, we felt that it would be far easier for committers, community and everyone in-between to be able to contribute to our project. No more Gerrit, confusing Gerrit configurations, or multiple remotes – just fork the project, make awesome code and open a pull request. Simple.&lt;/p&gt;
&lt;h2&gt;Ok, so where’s the code&lt;/h2&gt;
&lt;p&gt;All of the Orion source code can now be found in the following locations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.client&quot;&gt;orion.client&lt;/a&gt; – the Orion client code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.server&quot;&gt;orion.server&lt;/a&gt; – the Orion Java server code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.server.node&quot;&gt;orion.server.node&lt;/a&gt; – this will eventually be the home of the Node.js-based Orion server. Its currently empty while we sort out what code we want to separate out&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/orion.electron&quot;&gt;orion.electron&lt;/a&gt; – this will eventually be the place we host our Electron-based app from. Currently it is empty while we sort out the builds, etc for the app&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What else do I need to know?&lt;/h2&gt;
&lt;p&gt;There are a few pretty important things that need to be addressed – especially if you are currently a contributor / committer to Orion.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure your Eclipse account is linked to your Github id. This is super-mega-ultra important, especially if you are a committer. The webmasters have provided a great wiki page that &lt;a href=&quot;https://wiki.eclipse.org/Social_Coding/Hosting_a_Project_at_GitHub#Moving_Your_Existing_Project_Repositories_to_GitHub&quot;&gt;talks more about this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure to update your repos / remotes. The old Git repositories have been set to read-only (as have the gerrits) – so make sure you update (or just re-clone) the repositories to avoid accidentally working against the old stuff.&lt;/li&gt;
&lt;li&gt;We are still using Bugzilla (so no changes in how to file / search / triage bugs). For the time being we will keep using it until we figure out a good flow for tracking issues across multiple repositories in GitHub.&lt;/li&gt;
&lt;li&gt;All contributions should be made as pull requests. The Gerrit instances for each old repository are set to read-only so they cannot be used, and if you really want to, you could still attach a patch to the bug you want to fix (but seriously, please use a pull request).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks again to everyone that helped make this possible.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</description>
	<pubDate>Thu, 27 Apr 2017 16:24:10 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Unveiling the Eclipse IoT Open Testbeds</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=2850</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/EEkC9zDmh2c/unveiling-the-eclipse-iot-open-testbeds</link>
	<description>&lt;p&gt;Today we are &lt;a href=&quot;https://www.eclipse.org/org/press-release/20170426_iottestbeds.php&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;announcing&lt;/a&gt; the &lt;a href=&quot;https://iot.eclipse.org/testbeds&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse IoT Open Testbeds&lt;/a&gt;, a new initiative for driving adoption of open source and open standards in the industry.&lt;/p&gt;
&lt;p&gt;For more than five years, over 30 open source projects have been calling &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Eclipse IoT&lt;/strong&gt;&lt;/a&gt; home. Yet, it doesn’t necessarily make it easy for people to &lt;strong&gt;understand how to put all the pieces together&lt;/strong&gt;, from integration with sensors and hardware, to networking and connectivity, to cloud computing and enterprise integration.&lt;/p&gt;
&lt;p&gt;More often than not, I am asked about where to find blueprints or reference architectures for IoT, and how one is expected to leverage open source software such as what Eclipse IoT has to offer. These are very legitimate questions as building any IoT solution requires much more than just open source software components.&lt;/p&gt;
&lt;p&gt;I believe the &lt;strong&gt;Eclipse Open IoT Testbeds&lt;/strong&gt; are a unique approach to answering these kind of questions, especially since this is the first time IoT leading companies are effectively &lt;strong&gt;developing the testbeds in open source&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Open Source FTW!&lt;/h2&gt;
&lt;p&gt;Creating testbeds that demonstrate how a particular set of technologies can be used is certainly not a new idea, I’ll give you that. What is unique with the approach we are taking, though, is that &lt;strong&gt;we are making the testbeds available in open source&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means that you can really learn firsthand how all the pieces of an IoT solution are being put together to solve a real business case, as well as experiment with the actual code and dive into the architecture.&lt;/p&gt;
&lt;p&gt;Over time I certainly expect people will start forking the testbeds’ code to create their own extensions and, even better, will contribute them back to the community.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2854&quot; height=&quot;157&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-testbed-header-1024x256.jpg&quot; width=&quot;628&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Open Testbed for Asset Tracking&lt;/h1&gt;
&lt;p&gt;The&lt;strong&gt; &lt;a href=&quot;https://iot.eclipse.org/testbeds/asset-tracking&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;first testbed we have been working on is around Asset Tracking Management&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, we are showing how to &lt;strong&gt;track valuable assets&lt;/strong&gt; (think expensive/valuable parcels such as artwork) in real-time in order to optimize their transport, and in particular&lt;strong&gt; minimize the costs due to spoilage, damage or delays&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-value-proposition.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2866&quot; height=&quot;146&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/asset-tracking-value-proposition-1024x241.png&quot; width=&quot;621&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The testbed features Eclipse open source projects such as &lt;a href=&quot;https://eclipse.org/kura&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Kura&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/kapua&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Kapua&lt;/a&gt;, &lt;a href=&quot;https://eclipse.org/kapua&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Paho&lt;/a&gt; or &lt;a href=&quot;https://eclipse.org/che&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Eclipse Che&lt;/a&gt;, but is of course also leveraging other technologies and commercial offerings – like any solution should, right?&lt;/p&gt;
&lt;p&gt;Head over to the &lt;strong&gt;&lt;a href=&quot;https://iot.eclipse.org/testbeds/asset-tracking/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Asset Tracking testbed webpage&lt;/a&gt;&lt;/strong&gt; to learn how, to name a few, OpenShift, Zulu Embedded, Samsung ARTIK, and more, have been integrated to demonstrate a full end-to-end IoT solution, all the way from data collection to complex event processing, to exposing information to 3rd parties through open APIs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/architecture-diagram-e1493299672882.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-2858&quot; height=&quot;200&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/architecture-diagram-1024x341.png&quot; width=&quot;600&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;What’s next?&lt;/h1&gt;
&lt;p&gt;The Asset Tracking Open Testbed is our first take at demonstrating how companies are building real IoT Solutions today.&lt;/p&gt;
&lt;p&gt;We are already planning to create other testbeds around e.g Smart Manufacturing, and therefore are inviting anyone interested in existing or future testbeds to join us at &lt;a href=&quot;https://iot.eclipse.org/testbeds&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://iot.eclipse.org/testbeds&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Join us at Red Hat Summit and IoT World 2017!&lt;/h1&gt;
&lt;p&gt;If you are attending Red Hat Summit (May 2-4, Boston) or IoT World 2017 (May 16-18, Santa Clara), please make sure to stop by our Asset Tracking Testbed Demo, see it run live, and understand better the contribution each partner has been making to the testbed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-2863&quot; height=&quot;161&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/04/May-2-4-2017-Boston-MA-300x161.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
 &lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/EEkC9zDmh2c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 14:44:59 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Eclipse IoT Open Testbeds</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/GTmsZQAPDx4/20170426_iottestbeds.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/GTmsZQAPDx4/20170426_iottestbeds.php</link>
	<description>Announcing the creation of the Eclipse IoT Open Testbeds, an initiative to drive adoption of IoT open source and open standards.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/GTmsZQAPDx4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 13:05:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Release of Eclipse Kura 3.0 Drives Simplification of IoT Edge Computing</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/gB7lgcVXi5I/20170426_kura3.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/gB7lgcVXi5I/20170426_kura3.php</link>
	<description>Eclipse Kura 3.0 will be available for download in early May.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/gB7lgcVXi5I&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 12:30:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Program Ready for EclipseCon France 2017</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/H5MB7DarBtc/2017-06-21</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/H5MB7DarBtc/2017-06-21</link>
	<description>See the program, and register by May 12 for the best price.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/H5MB7DarBtc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Apr 2017 09:10:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Building a real-time web app with Angular/Ngrx and Vert.x</title>
	<guid isPermaLink="true">http://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</guid>
	<link>http://vertx.io/blog/building-a-real-time-web-app-with-angular-ngrx-and-vert-x</link>
	<description>&lt;article&gt;&lt;p&gt;Nowadays, there are multiple tech stacks to build a real-time web app. What are the best choices to build real-time Angular client apps, connected to a JVM-based backend? This article describes an Angular+Vertx real-time architecture with a Proof of Concept demo app.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;content&quot;&gt;this is a re-publication of the following &lt;a href=&quot;https://medium.com/@benorama/building-a-realtime-web-app-with-angular-ngrx-and-vert-x-a5381c0397a1&quot;&gt;Medium post&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Welcome to the real-time web!&lt;/strong&gt; It’s time to move on from traditional synchronous HTTP request/response architectures to reactive apps with connected clients (ouch… that’s a lot of buzzwords in just one sentence)!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Real-time app&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/data-in-motion.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: &lt;a href=&quot;https://www.voxxed.com&quot;&gt;https://www.voxxed.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To build this kind of app, &lt;a href=&quot;https://www.meteor.com&quot;&gt;MeteorJS&lt;/a&gt; is the new cool kid on the block (v1.0 released in october 2014): &lt;strong&gt;a full stack Javascript platform to build connected-client reactive applications&lt;/strong&gt;. It allows JS developers to build and deploy amazing modern web and mobile apps (iOS/Android) in no time, using a unified backend+frontend code within a single app repo. That’s a pretty ambitious approach but it requires a very opinionated and highly coupled JS tech stack and it’s still a pretty niche framework.&lt;/p&gt;
&lt;p&gt;Moreover, we are a Java shop on the backend. At AgoraPulse, we rely heavily on :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; and &lt;a href=&quot;http://ionicframework.com&quot;&gt;Ionic&lt;/a&gt; for the JS frontend (with a shared business/data architecture based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;Ngrx&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; and &lt;a href=&quot;https://grails.org&quot;&gt;Grails&lt;/a&gt; ecosystem for the JVM backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So my question is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the best choices to build real-time Angular client apps, connected to a JVM-based backend these days?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our requirements are pretty basic. We don’t need full Meteor’s end-to-end application model.
We just want to be able to :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build a reactive app with an event bus on the JVM, and&lt;/li&gt;
&lt;li&gt;extend the event bus down to the browser to be able to publish/subscribe to real-time events from an Angular app.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;server-side-jvm-&quot;&gt;Server side (JVM)&lt;/h3&gt;
&lt;p&gt;Reactive apps is a hot topic nowadays and there are many great libs/platforms to build this type of event-driven architecture on the JVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lightbend.com&quot;&gt;Lightbend&lt;/a&gt; platform (Play, Akka, Scala),&lt;/li&gt;
&lt;li&gt;Spring &lt;a href=&quot;http://projectreactor.io&quot;&gt;Project Reactor&lt;/a&gt; (integrated into Grails 3.0).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;client-side&quot;&gt;Client side&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;ReactJS&lt;/a&gt; and &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; are the two most popular framework right now to build modern JS apps. Most platforms use &lt;a href=&quot;https://github.com/sockjs/sockjs-client&quot;&gt;SockJS&lt;/a&gt; to handle real-time connections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/&quot;&gt;Vertx-web&lt;/a&gt; provides a SockJS server implementation with an event bus bridge and a &lt;a href=&quot;http://vertx.io/docs/vertx-web/groovy/#_sockjs_event_bus_bridge&quot;&gt;vertx-evenbus.js&lt;/a&gt; client library (very easy to use),&lt;/li&gt;
&lt;li&gt;Spring provides websocket SockJS support though Spring Messaging and Websocket libs (see an example &lt;a href=&quot;https://spring.io/guides/gs/messaging-stomp-websocket/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-choice-vert-x-angular&quot;&gt;Final choice: Vert.x + Angular&lt;/h3&gt;
&lt;p&gt;In the end, I’ve chosen to experiment with Vert.x for its excellent Groovy support, distributed event bus, scalability and ease of use.&lt;/p&gt;
&lt;p&gt;I enjoyed it very much. Let me show you the result of my experimentation which is the root of our real-time features coming very soon in AgoraPulse v6.0!&lt;/p&gt;
&lt;h2 id=&quot;why-vert-x-&quot;&gt;Why Vert.x?&lt;/h2&gt;
&lt;p&gt;Like other reactive platform, Vert.x is event driven and non blocking. It scales very well (even more that Node.js).&lt;/p&gt;
&lt;p&gt;Unlike other reactive platforms, Vert.x is polyglot: you can use Vert.x with multiple languages including Java, JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin.&lt;/p&gt;
&lt;p&gt;Unlike Node.js, Vert.x is a general purpose tool-kit and unopinionated. It’s a versatile platform suitable for many things: from simple network utilities, sophisticated modern web applications, HTTP/REST microservices or a full blown back-end message-bus application.&lt;/p&gt;
&lt;p&gt;Like other reactive platforms, it looks scary in the begining when you read the documentation… ;) But once you start playing with it, it remains fun and simple to use, especially with Groovy! Vert.x really allows you to build substantial systems without getting tangled in complexity.&lt;/p&gt;
&lt;p&gt;In my case, I was mainly interested by the distributed event-bus provided (a core feature of Vert.x).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To validate our approach, we built prototypes with the following goals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;share and synchronize a common (Ngrx-based) state between multiple connected clients, and&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;distribute real-time (Ngrx-based) actions across multiple connected clients, which impact local states/reducers.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; is a RxJS powered state management inspired by Redux for Angular apps. It’s currently the most popular way to structure complex business logic in Angular apps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Redux&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/redux.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&quot;&gt;https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;proof-of-concept&quot;&gt;PROOF OF CONCEPT&lt;/h2&gt;
&lt;p&gt;Here is the repo of our initial proof of concept:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/benorama/ngrx-realtime-app&quot;&gt;http://github.com/benorama/ngrx-realtime-app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The repo is divided into two separate projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vert.x server app&lt;/strong&gt;, based on &lt;a href=&quot;http://vertx.io&quot;&gt;Vert.x&lt;/a&gt; (version 3.3), managed by &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt;, with a main verticle developed in &lt;a href=&quot;http://groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; lang.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Angular client app&lt;/strong&gt;, based on Angular (version 4.0.1), managed by &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt; CLI with state, reducers and actions logic based on &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt; (version 2.2.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the demo, we are using the counter example code (actions and reducers) from &lt;a href=&quot;https://github.com/ngrx/store&quot;&gt;@ngrx/store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The counter client business logic is based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CounterState&lt;/code&gt; interface, counter state model,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counterReducer&lt;/code&gt; reducer, counter state management based on dispatched actions, and&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Increment&lt;/em&gt;, &lt;em&gt;decrement&lt;/em&gt; and &lt;em&gt;reset&lt;/em&gt; counter actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State is maintained server-side with a simple singleton &lt;code&gt;CounterService&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs groovy&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CounterService&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; INCREMENT = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Increment'&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; DECREMENT = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Decrement'&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RESET = &lt;span class=&quot;hljs-string&quot;&gt;'[Counter] Reset'&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-typename&quot;&gt;void&lt;/span&gt; handleEvent(event) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(event.type) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;INCREMENT:&lt;/span&gt;
                total++
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;DECREMENT:&lt;/span&gt;
                total--
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;RESET:&lt;/span&gt;
                total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;client-state-initialization-through-request-response&quot;&gt;Client state initialization through Request/Response&lt;/h3&gt;
&lt;p&gt;Initial state is initialized with simple &lt;strong&gt;request/response&lt;/strong&gt; (or send/reply) on the event bus.
Once the client is connected, it sends a request to the event bus at the address &lt;strong&gt;counter::total&lt;/strong&gt;. The server replies directly with the value of &lt;code&gt;CounterService&lt;/code&gt; total and the client dispatches locally a &lt;em&gt;reset&lt;/em&gt; action with the total value from the reply.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Vertx Request Response&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/vertx-request-response.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;initializeCounter() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.send(&lt;span class=&quot;hljs-string&quot;&gt;'counter::total'&lt;/span&gt;, body, (error, message) =&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle reply&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message &amp;amp;&amp;amp; message.body) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CounterActions.ResetAction();
            localAction.payload = message.body; &lt;span class=&quot;hljs-comment&quot;&gt;// Total value&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
        }
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;actions-distribution-through-publish-subscribe&quot;&gt;Actions distribution through Publish/Subscribe&lt;/h3&gt;
&lt;p&gt;Action distribution/sync uses the &lt;strong&gt;publish/subscribe&lt;/strong&gt; pattern.&lt;/p&gt;
&lt;p&gt;Counter actions are published from the client to the event bus at the address &lt;strong&gt;counter::actions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any client that have subscribed to &lt;strong&gt;counter::actions&lt;/strong&gt; address will receive the actions and redispatch them locally to impact app states/reducers.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Vertx Publish Subscribe&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/vertx-publish-subscribe.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&quot;&gt;https://www.slideshare.net/RedHatDevelopers/vertx-microservices-were-never-so-easy-clement-escoffier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is an extract of the corresponding code (from &lt;code&gt;AppEventBusService&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;publishAction(action: RemoteAction) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (action.publishedByUser) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This action has already been published&quot;&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
    }
    action.publishedByUser = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.publish(action.eventBusAddress, action);
}
subscribeToActions(eventBusAddress: &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.eventBusService.registerHandler(eventBusAddress, (error, message) =&amp;gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle message from subscription&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (message.body.publishedByUser === &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.currentUser) {
            &lt;span class=&quot;hljs-comment&quot;&gt;// Ignore action sent by current manager&lt;/span&gt;
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; localAction = message.body;
        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.store.dispatch(localAction);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The event bus publishing logic is achieved through a simple Ngrx Effects. Any actions that extend &lt;code&gt;RemoteAction&lt;/code&gt; class will be published to the event bus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs typescript&quot;&gt;@Injectable()
&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; AppEventBusEffects {

    &lt;span class=&quot;hljs-constructor&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;(private actions$: Actions, private appEventBusService: AppEventBusService) &lt;/span&gt;{}
    &lt;span class=&quot;hljs-comment&quot;&gt;// Listen to all actions and publish remote actions to account event bus&lt;/span&gt;
    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) remoteAction$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .filter(action =&amp;gt; action &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; RemoteAction &amp;amp;&amp;amp; action.publishedByUser == &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)
        .do((action: RemoteAction) =&amp;gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.publishAction(action);
        });

    @Effect({dispatch: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;}) login$ = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.actions$
        .ofType(UserActionTypes.LOGIN)
        .do(() =&amp;gt; {
            &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.appEventBusService.connect();
        });
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see all of this in action by locally launching the server and the client app in two separate browser windows.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Demo app screen&quot; src=&quot;http://vertx.io/assets/blog/vertx-realtime-angular-ngrx/demo-app-screen.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus: the demo app also includes user status (offline/online), based of the event bus connection status.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The counter state is shared and synchronized between connected clients and each local action is distributed in real-time to other clients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mission accomplished!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Typescript version of Vertx EventBus Client &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; The app uses our own Typescript version of the official JS &lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Vertx EventBus Client&lt;/a&gt;. It can be found &lt;a href=&quot;https://gist.github.com/benorama/93373c3c1c3574732d6cc1b4754aab9f&quot;&gt;here&lt;/a&gt;, any feedback, improvement suggestions are welcome!&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.4.4.AM3 for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.4.4.am3-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/4.4.4.am3-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.4.4.AM3 (Developer Milestone 3) build for Eclipse Neon.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.AM3.html&quot;&gt;JBoss Tools 4.4.4 AM3&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.4.AM3.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;pipeline-builds-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#pipeline-builds-support&quot;&gt;&lt;/a&gt;Pipeline builds support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pipeline based builds are now supported by the OpenShift tooling.
      When creating an application, if using a template, if one of the builds is based on pipeline, you can view the detail
      of the pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-wizard.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When your application is deployed, you can see the details of the build configuration for the pipeline based builds:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pipeline details&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/pipeline-details.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More to come as we are improving the pipeline support in the OpenShift tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 25 Apr 2017 14:09:02 +0000</pubDate>
</item>

</channel>
</rss>
